{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kavindu\\\\Desktop\\\\New folder\\\\frontend\\\\src\\\\pages\\\\StudentDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport { Terminal } from \"xterm\";\nimport \"xterm/css/xterm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // adjust if backend runs on different host\n\nexport default function StudentDashboard() {\n  _s();\n  const [serverIp, setServerIp] = useState(\"\");\n  const [serverUser, setServerUser] = useState(\"\");\n  const [serverPassword, setServerPassword] = useState(\"\");\n  const [connected, setConnected] = useState(false);\n  const [logId, setLogId] = useState(null);\n  const termRef = useRef(null);\n  const terminal = useRef(null);\n\n  // Init terminal once\n  useEffect(() => {\n    terminal.current = new Terminal();\n    terminal.current.open(termRef.current);\n\n    // handle server output\n    socket.on(\"output\", data => {\n      terminal.current.write(data);\n    });\n    return () => {\n      socket.off(\"output\");\n    };\n  }, []);\n  const connectServer = async () => {\n    try {\n      // Replace with real logged-in userId from auth context/localStorage\n      const studentId = localStorage.getItem(\"userId\");\n      const res = await axios.post(\"http://localhost:5000/api/server/connect\", {\n        serverIp,\n        serverUser,\n        serverPassword,\n        studentId\n      });\n      setLogId(res.data.logId);\n      setConnected(true);\n\n      // Start SSH session via socket.io\n      socket.emit(\"startSession\", {\n        serverIp,\n        serverUser,\n        serverPassword,\n        logIdParam: res.data.logId\n      });\n\n      // Capture student input from xterm\n      terminal.current.onData(data => {\n        socket.emit(\"input\", data);\n      });\n    } catch (err) {\n      var _err$response, _err$response$data;\n      alert(\"Connection failed: \" + ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n    }\n  };\n  const disconnectServer = () => {\n    socket.emit(\"disconnectSession\");\n    terminal.current.clear();\n    setConnected(false);\n    setLogId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Student Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), !connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Server IP\",\n        value: serverIp,\n        onChange: e => setServerIp(e.target.value),\n        className: \"border p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Server Username\",\n        value: serverUser,\n        onChange: e => setServerUser(e.target.value),\n        className: \"border p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Server Password\",\n        value: serverPassword,\n        onChange: e => setServerPassword(e.target.value),\n        className: \"border p-2 w-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectServer,\n        className: \"bg-blue-500 text-white px-4 py-2 rounded\",\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: disconnectServer,\n        className: \"bg-red-500 text-white px-4 py-2 rounded mb-2\",\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: termRef,\n        style: {\n          height: \"400px\",\n          background: \"black\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(StudentDashboard, \"HWhUnKy9l+FnAzy7gtYIu84ONJ8=\");\n_c = StudentDashboard;\nvar _c;\n$RefreshReg$(_c, \"StudentDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","io","Terminal","jsxDEV","_jsxDEV","socket","StudentDashboard","_s","serverIp","setServerIp","serverUser","setServerUser","serverPassword","setServerPassword","connected","setConnected","logId","setLogId","termRef","terminal","current","open","on","data","write","off","connectServer","studentId","localStorage","getItem","res","post","emit","logIdParam","onData","err","_err$response","_err$response$data","alert","response","message","disconnectServer","clear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","ref","style","height","background","_c","$RefreshReg$"],"sources":["C:/Users/Kavindu/Desktop/New folder/frontend/src/pages/StudentDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\nimport { Terminal } from \"xterm\";\r\nimport \"xterm/css/xterm.css\";\r\n\r\nconst socket = io(\"http://localhost:5000\"); // adjust if backend runs on different host\r\n\r\nexport default function StudentDashboard() {\r\n  const [serverIp, setServerIp] = useState(\"\");\r\n  const [serverUser, setServerUser] = useState(\"\");\r\n  const [serverPassword, setServerPassword] = useState(\"\");\r\n  const [connected, setConnected] = useState(false);\r\n  const [logId, setLogId] = useState(null);\r\n\r\n  const termRef = useRef(null);\r\n  const terminal = useRef(null);\r\n\r\n  // Init terminal once\r\n  useEffect(() => {\r\n    terminal.current = new Terminal();\r\n    terminal.current.open(termRef.current);\r\n\r\n    // handle server output\r\n    socket.on(\"output\", (data) => {\r\n      terminal.current.write(data);\r\n    });\r\n\r\n    return () => {\r\n      socket.off(\"output\");\r\n    };\r\n  }, []);\r\n\r\n  const connectServer = async () => {\r\n    try {\r\n      // Replace with real logged-in userId from auth context/localStorage\r\n      const studentId = localStorage.getItem(\"userId\");\r\n\r\n      const res = await axios.post(\"http://localhost:5000/api/server/connect\", {\r\n        serverIp,\r\n        serverUser,\r\n        serverPassword,\r\n        studentId,\r\n      });\r\n\r\n      setLogId(res.data.logId);\r\n      setConnected(true);\r\n\r\n      // Start SSH session via socket.io\r\n      socket.emit(\"startSession\", {\r\n        serverIp,\r\n        serverUser,\r\n        serverPassword,\r\n        logIdParam: res.data.logId,\r\n      });\r\n\r\n      // Capture student input from xterm\r\n      terminal.current.onData((data) => {\r\n        socket.emit(\"input\", data);\r\n      });\r\n    } catch (err) {\r\n      alert(\"Connection failed: \" + err.response?.data?.message || err.message);\r\n    }\r\n  };\r\n\r\n  const disconnectServer = () => {\r\n    socket.emit(\"disconnectSession\");\r\n    terminal.current.clear();\r\n    setConnected(false);\r\n    setLogId(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-4\">\r\n      <h2 className=\"text-xl font-bold mb-4\">Student Dashboard</h2>\r\n\r\n      {!connected ? (\r\n        <div className=\"space-y-2\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Server IP\"\r\n            value={serverIp}\r\n            onChange={(e) => setServerIp(e.target.value)}\r\n            className=\"border p-2 w-full\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Server Username\"\r\n            value={serverUser}\r\n            onChange={(e) => setServerUser(e.target.value)}\r\n            className=\"border p-2 w-full\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Server Password\"\r\n            value={serverPassword}\r\n            onChange={(e) => setServerPassword(e.target.value)}\r\n            className=\"border p-2 w-full\"\r\n          />\r\n          <button\r\n            onClick={connectServer}\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded\"\r\n          >\r\n            Connect\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button\r\n            onClick={disconnectServer}\r\n            className=\"bg-red-500 text-white px-4 py-2 rounded mb-2\"\r\n          >\r\n            Disconnect\r\n          </button>\r\n          <div ref={termRef} style={{ height: \"400px\", background: \"black\" }} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}