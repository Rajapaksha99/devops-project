{"ast":null,"code":"// StudentDashboard.js - Vanilla JavaScript Component\n\nclass StudentDashboard {\n  constructor(containerId) {\n    this.container = document.getElementById(containerId);\n    this.connections = {};\n    this.loading = {};\n\n    // Your 5 server IPs\n    this.servers = [{\n      id: 1,\n      ip: '172.184.216.215',\n      name: 'Server 1'\n    }, {\n      id: 2,\n      ip: '20.245.171.127',\n      name: 'Server 2'\n    }, {\n      id: 3,\n      ip: '192.168.1.100',\n      name: 'Server 3'\n    }, {\n      id: 4,\n      ip: '10.0.0.50',\n      name: 'Server 4'\n    }, {\n      id: 5,\n      ip: '203.112.45.89',\n      name: 'Server 5'\n    }];\n    this.init();\n  }\n  init() {\n    this.render();\n    this.attachEventListeners();\n  }\n  render() {\n    this.container.innerHTML = `\n            <div class=\"dashboard-container\">\n                <!-- Header -->\n                <header class=\"dashboard-header\">\n                    <div class=\"header-content\">\n                        <div class=\"header-left\">\n                            <div class=\"terminal-icon\">‚ö°</div>\n                            <h1>Student Dashboard</h1>\n                        </div>\n                        <div class=\"status-indicator\">\n                            <div class=\"status-dot\"></div>\n                            <span>Online</span>\n                        </div>\n                    </div>\n                </header>\n\n                <!-- Main Content -->\n                <main class=\"dashboard-main\">\n                    <div class=\"dashboard-intro\">\n                        <h2>Available Servers</h2>\n                        <p>Connect to any of the hosting servers below using your credentials</p>\n                    </div>\n\n                    <!-- Server Grid -->\n                    <div class=\"servers-grid\">\n                        ${this.servers.map(server => this.renderServerCard(server)).join('')}\n                    </div>\n\n                    <!-- Instructions -->\n                    <div class=\"instructions-card\">\n                        <h3>üñ•Ô∏è How to Connect</h3>\n                        <div class=\"instructions-list\">\n                            <p>1. Select a server from the list above</p>\n                            <p>2. Enter your username and password for that server</p>\n                            <p>3. Click \"Connect\" to open a terminal session in a new tab</p>\n                            <p>4. You can connect to multiple servers simultaneously</p>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        `;\n    this.addStyles();\n  }\n  renderServerCard(server) {\n    return `\n            <div class=\"server-card\" data-server-id=\"${server.id}\">\n                <!-- Server Header -->\n                <div class=\"server-header\">\n                    <div class=\"server-icon\">üñ•Ô∏è</div>\n                    <div class=\"server-info\">\n                        <h3>${server.name}</h3>\n                        <p class=\"server-ip\">${server.ip}</p>\n                    </div>\n                </div>\n\n                <!-- Connection Form -->\n                <div class=\"connection-form\">\n                    <div class=\"input-group\">\n                        <label>üë§ Username</label>\n                        <input\n                            type=\"text\"\n                            placeholder=\"Enter username\"\n                            class=\"form-input username-input\"\n                            data-server-id=\"${server.id}\"\n                        />\n                    </div>\n\n                    <div class=\"input-group\">\n                        <label>üîí Password</label>\n                        <input\n                            type=\"password\"\n                            placeholder=\"Enter password\"\n                            class=\"form-input password-input\"\n                            data-server-id=\"${server.id}\"\n                        />\n                    </div>\n\n                    <button\n                        class=\"connect-btn\"\n                        data-server-id=\"${server.id}\"\n                        onclick=\"dashboard.handleConnect(${server.id})\"\n                    >\n                        <span>üîó</span>\n                        <span>Connect</span>\n                    </button>\n                </div>\n\n                <!-- Connection Status -->\n                <div class=\"connection-status\">\n                    <div class=\"status-dot-small\"></div>\n                    <span>Ready to connect</span>\n                </div>\n            </div>\n        `;\n  }\n  attachEventListeners() {\n    // Add Enter key support for password inputs\n    const passwordInputs = this.container.querySelectorAll('.password-input');\n    passwordInputs.forEach(input => {\n      input.addEventListener('keypress', e => {\n        if (e.key === 'Enter') {\n          const serverId = parseInt(input.dataset.serverId);\n          this.handleConnect(serverId);\n        }\n      });\n    });\n\n    // Track input changes\n    const allInputs = this.container.querySelectorAll('.form-input');\n    allInputs.forEach(input => {\n      input.addEventListener('input', e => {\n        const serverId = parseInt(input.dataset.serverId);\n        const field = input.classList.contains('username-input') ? 'username' : 'password';\n        this.updateConnection(serverId, field, e.target.value);\n      });\n    });\n  }\n  updateConnection(serverId, field, value) {\n    if (!this.connections[serverId]) {\n      this.connections[serverId] = {};\n    }\n    this.connections[serverId][field] = value;\n  }\n  async handleConnect(serverId) {\n    const server = this.servers.find(s => s.id === serverId);\n    const credentials = this.connections[serverId];\n    if (!(credentials !== null && credentials !== void 0 && credentials.username) || !(credentials !== null && credentials !== void 0 && credentials.password)) {\n      alert('Please enter both username and password');\n      return;\n    }\n\n    // Set loading state\n    this.setLoading(serverId, true);\n    try {\n      // Create terminal page URL with connection details\n      const terminalUrl = `/terminal?host=${server.ip}&username=${encodeURIComponent(credentials.username)}&password=${encodeURIComponent(credentials.password)}&server=${encodeURIComponent(server.name)}`;\n\n      // Open terminal in new tab\n      const newWindow = window.open(terminalUrl, '_blank');\n      if (!newWindow) {\n        alert('Please allow popups for this site to open terminal windows');\n      } else {\n        // Clear password for security\n        const passwordInput = this.container.querySelector(`.password-input[data-server-id=\"${serverId}\"]`);\n        if (passwordInput) {\n          passwordInput.value = '';\n          this.updateConnection(serverId, 'password', '');\n        }\n      }\n    } catch (error) {\n      console.error('Connection error:', error);\n      alert('Failed to open terminal connection');\n    } finally {\n      this.setLoading(serverId, false);\n    }\n  }\n  setLoading(serverId, isLoading) {\n    this.loading[serverId] = isLoading;\n    const button = this.container.querySelector(`.connect-btn[data-server-id=\"${serverId}\"]`);\n    if (isLoading) {\n      button.innerHTML = `\n                <div class=\"spinner\"></div>\n                <span>Connecting...</span>\n            `;\n      button.disabled = true;\n      button.classList.add('loading');\n    } else {\n      button.innerHTML = `\n                <span>üîó</span>\n                <span>Connect</span>\n            `;\n      button.disabled = false;\n      button.classList.remove('loading');\n    }\n  }\n  addStyles() {\n    if (document.getElementById('dashboard-styles')) return;\n    const style = document.createElement('style');\n    style.id = 'dashboard-styles';\n    style.textContent = `\n            .dashboard-container {\n                min-height: 100vh;\n                background: linear-gradient(135deg, #0f172a 0%, #1e3a8a 50%, #0f172a 100%);\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            }\n\n            .dashboard-header {\n                background: rgba(30, 41, 59, 0.5);\n                backdrop-filter: blur(10px);\n                border-bottom: 1px solid #374151;\n            }\n\n            .header-content {\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 1rem 1.5rem;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n            }\n\n            .header-left {\n                display: flex;\n                align-items: center;\n                gap: 0.75rem;\n            }\n\n            .terminal-icon {\n                font-size: 2rem;\n                color: #60a5fa;\n            }\n\n            .dashboard-header h1 {\n                font-size: 1.5rem;\n                font-weight: bold;\n                color: white;\n            }\n\n            .status-indicator {\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n                color: #10b981;\n                font-size: 0.875rem;\n            }\n\n            .status-dot {\n                width: 8px;\n                height: 8px;\n                background: #10b981;\n                border-radius: 50%;\n                animation: pulse 2s infinite;\n            }\n\n            .dashboard-main {\n                max-width: 1200px;\n                margin: 0 auto;\n                padding: 2rem 1.5rem;\n            }\n\n            .dashboard-intro {\n                margin-bottom: 2rem;\n            }\n\n            .dashboard-intro h2 {\n                font-size: 1.25rem;\n                font-weight: 600;\n                color: white;\n                margin-bottom: 0.5rem;\n            }\n\n            .dashboard-intro p {\n                color: #94a3b8;\n            }\n\n            .servers-grid {\n                display: grid;\n                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n                gap: 1.5rem;\n                margin-bottom: 2rem;\n            }\n\n            .server-card {\n                background: rgba(30, 41, 59, 0.5);\n                backdrop-filter: blur(10px);\n                border: 1px solid #374151;\n                border-radius: 0.75rem;\n                padding: 1.5rem;\n                transition: all 0.3s ease;\n            }\n\n            .server-card:hover {\n                border-color: rgba(59, 130, 246, 0.5);\n                transform: translateY(-2px);\n            }\n\n            .server-header {\n                display: flex;\n                align-items: center;\n                gap: 0.75rem;\n                margin-bottom: 1rem;\n            }\n\n            .server-icon {\n                background: rgba(59, 130, 246, 0.2);\n                padding: 0.5rem;\n                border-radius: 0.5rem;\n                font-size: 1.5rem;\n            }\n\n            .server-info h3 {\n                font-size: 1.125rem;\n                font-weight: 600;\n                color: white;\n            }\n\n            .server-ip {\n                color: #60a5fa;\n                font-family: 'Courier New', monospace;\n                font-size: 0.875rem;\n                margin-top: 0.25rem;\n            }\n\n            .connection-form {\n                display: flex;\n                flex-direction: column;\n                gap: 1rem;\n            }\n\n            .input-group {\n                display: flex;\n                flex-direction: column;\n            }\n\n            .input-group label {\n                color: #d1d5db;\n                font-size: 0.875rem;\n                font-weight: 500;\n                margin-bottom: 0.5rem;\n            }\n\n            .form-input {\n                width: 100%;\n                padding: 0.5rem 0.75rem;\n                background: rgba(51, 65, 85, 0.5);\n                border: 1px solid #4b5563;\n                border-radius: 0.5rem;\n                color: white;\n                font-size: 0.875rem;\n                transition: all 0.2s ease;\n            }\n\n            .form-input::placeholder {\n                color: #9ca3af;\n            }\n\n            .form-input:focus {\n                outline: none;\n                border-color: #3b82f6;\n                box-shadow: 0 0 0 1px #3b82f6;\n            }\n\n            .connect-btn {\n                width: 100%;\n                background: linear-gradient(to right, #2563eb, #1d4ed8);\n                color: white;\n                font-weight: 500;\n                padding: 0.625rem 1rem;\n                border: none;\n                border-radius: 0.5rem;\n                cursor: pointer;\n                transition: all 0.2s ease;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                gap: 0.5rem;\n                font-size: 0.875rem;\n            }\n\n            .connect-btn:hover:not(:disabled) {\n                background: linear-gradient(to right, #1d4ed8, #1e40af);\n                transform: translateY(-1px);\n            }\n\n            .connect-btn:disabled {\n                background: linear-gradient(to right, #475569, #374151);\n                cursor: not-allowed;\n                transform: none;\n            }\n\n            .spinner {\n                width: 16px;\n                height: 16px;\n                border: 2px solid rgba(255, 255, 255, 0.3);\n                border-top: 2px solid white;\n                border-radius: 50%;\n                animation: spin 1s linear infinite;\n            }\n\n            .connection-status {\n                margin-top: 1rem;\n                padding-top: 1rem;\n                border-top: 1px solid #374151;\n                display: flex;\n                align-items: center;\n                gap: 0.5rem;\n            }\n\n            .status-dot-small {\n                width: 8px;\n                height: 8px;\n                background: #6b7280;\n                border-radius: 50%;\n            }\n\n            .connection-status span {\n                color: #9ca3af;\n                font-size: 0.75rem;\n            }\n\n            .instructions-card {\n                background: rgba(30, 41, 59, 0.3);\n                border: 1px solid #374151;\n                border-radius: 0.75rem;\n                padding: 1.5rem;\n            }\n\n            .instructions-card h3 {\n                font-size: 1.125rem;\n                font-weight: 600;\n                color: white;\n                margin-bottom: 0.75rem;\n            }\n\n            .instructions-list {\n                color: #d1d5db;\n                line-height: 1.6;\n            }\n\n            .instructions-list p {\n                margin: 0.5rem 0;\n            }\n\n            @keyframes pulse {\n                0%, 100% { opacity: 1; }\n                50% { opacity: 0.5; }\n            }\n\n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n\n            @media (max-width: 768px) {\n                .servers-grid {\n                    grid-template-columns: 1fr;\n                }\n                .dashboard-main {\n                    padding: 1rem;\n                }\n            }\n        `;\n    document.head.appendChild(style);\n  }\n  handleInputChange(serverId, field, value) {\n    if (!this.connections[serverId]) {\n      this.connections[serverId] = {};\n    }\n    this.connections[serverId][field] = value;\n  }\n  async handleConnect(serverId) {\n    const server = this.servers.find(s => s.id === serverId);\n    const credentials = this.connections[serverId];\n    if (!(credentials !== null && credentials !== void 0 && credentials.username) || !(credentials !== null && credentials !== void 0 && credentials.password)) {\n      alert('Please enter both username and password');\n      return;\n    }\n    this.setLoading(serverId, true);\n    try {\n      // Create terminal page URL with connection details\n      const terminalUrl = `/terminal?host=${server.ip}&username=${encodeURIComponent(credentials.username)}&password=${encodeURIComponent(credentials.password)}&server=${encodeURIComponent(server.name)}`;\n\n      // Open terminal in new tab\n      const newWindow = window.open(terminalUrl, '_blank');\n      if (!newWindow) {\n        alert('Please allow popups for this site to open terminal windows');\n      } else {\n        // Clear password for security\n        const passwordInput = this.container.querySelector(`.password-input[data-server-id=\"${serverId}\"]`);\n        if (passwordInput) {\n          passwordInput.value = '';\n          this.handleInputChange(serverId, 'password', '');\n        }\n      }\n    } catch (error) {\n      console.error('Connection error:', error);\n      alert('Failed to open terminal connection');\n    } finally {\n      this.setLoading(serverId, false);\n    }\n  }\n  setLoading(serverId, isLoading) {\n    this.loading[serverId] = isLoading;\n    const button = this.container.querySelector(`.connect-btn[data-server-id=\"${serverId}\"]`);\n    if (isLoading) {\n      button.innerHTML = `\n                <div class=\"spinner\"></div>\n                <span>Connecting...</span>\n            `;\n      button.disabled = true;\n    } else {\n      button.innerHTML = `\n                <span>üîó</span>\n                <span>Connect</span>\n            `;\n      button.disabled = false;\n    }\n  }\n}\n\n// Usage: Create dashboard when page loads\nlet dashboard;\ndocument.addEventListener('DOMContentLoaded', function () {\n  dashboard = new StudentDashboard('dashboard-root');\n\n  // Attach input listeners\n  document.addEventListener('input', function (e) {\n    if (e.target.classList.contains('form-input')) {\n      const serverId = parseInt(e.target.dataset.serverId);\n      const field = e.target.classList.contains('username-input') ? 'username' : 'password';\n      dashboard.handleInputChange(serverId, field, e.target.value);\n    }\n  });\n});\n\n// Export for use in other files\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = StudentDashboard;\n}","map":{"version":3,"names":["StudentDashboard","constructor","containerId","container","document","getElementById","connections","loading","servers","id","ip","name","init","render","attachEventListeners","innerHTML","map","server","renderServerCard","join","addStyles","passwordInputs","querySelectorAll","forEach","input","addEventListener","e","key","serverId","parseInt","dataset","handleConnect","allInputs","field","classList","contains","updateConnection","target","value","find","s","credentials","username","password","alert","setLoading","terminalUrl","encodeURIComponent","newWindow","window","open","passwordInput","querySelector","error","console","isLoading","button","disabled","add","remove","style","createElement","textContent","head","appendChild","handleInputChange","dashboard","module","exports"],"sources":["C:/Users/Kavindu/Desktop/ssh project slt/frontend/src/pages/StudentDashboard.js"],"sourcesContent":["// StudentDashboard.js - Vanilla JavaScript Component\r\n\r\nclass StudentDashboard {\r\n    constructor(containerId) {\r\n        this.container = document.getElementById(containerId);\r\n        this.connections = {};\r\n        this.loading = {};\r\n        \r\n        // Your 5 server IPs\r\n        this.servers = [\r\n            { id: 1, ip: '172.184.216.215', name: 'Server 1' },\r\n            { id: 2, ip: '20.245.171.127', name: 'Server 2' },\r\n            { id: 3, ip: '192.168.1.100', name: 'Server 3' },\r\n            { id: 4, ip: '10.0.0.50', name: 'Server 4' },\r\n            { id: 5, ip: '203.112.45.89', name: 'Server 5' }\r\n        ];\r\n        \r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.render();\r\n        this.attachEventListeners();\r\n    }\r\n\r\n    render() {\r\n        this.container.innerHTML = `\r\n            <div class=\"dashboard-container\">\r\n                <!-- Header -->\r\n                <header class=\"dashboard-header\">\r\n                    <div class=\"header-content\">\r\n                        <div class=\"header-left\">\r\n                            <div class=\"terminal-icon\">‚ö°</div>\r\n                            <h1>Student Dashboard</h1>\r\n                        </div>\r\n                        <div class=\"status-indicator\">\r\n                            <div class=\"status-dot\"></div>\r\n                            <span>Online</span>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n\r\n                <!-- Main Content -->\r\n                <main class=\"dashboard-main\">\r\n                    <div class=\"dashboard-intro\">\r\n                        <h2>Available Servers</h2>\r\n                        <p>Connect to any of the hosting servers below using your credentials</p>\r\n                    </div>\r\n\r\n                    <!-- Server Grid -->\r\n                    <div class=\"servers-grid\">\r\n                        ${this.servers.map(server => this.renderServerCard(server)).join('')}\r\n                    </div>\r\n\r\n                    <!-- Instructions -->\r\n                    <div class=\"instructions-card\">\r\n                        <h3>üñ•Ô∏è How to Connect</h3>\r\n                        <div class=\"instructions-list\">\r\n                            <p>1. Select a server from the list above</p>\r\n                            <p>2. Enter your username and password for that server</p>\r\n                            <p>3. Click \"Connect\" to open a terminal session in a new tab</p>\r\n                            <p>4. You can connect to multiple servers simultaneously</p>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        `;\r\n\r\n        this.addStyles();\r\n    }\r\n\r\n    renderServerCard(server) {\r\n        return `\r\n            <div class=\"server-card\" data-server-id=\"${server.id}\">\r\n                <!-- Server Header -->\r\n                <div class=\"server-header\">\r\n                    <div class=\"server-icon\">üñ•Ô∏è</div>\r\n                    <div class=\"server-info\">\r\n                        <h3>${server.name}</h3>\r\n                        <p class=\"server-ip\">${server.ip}</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Connection Form -->\r\n                <div class=\"connection-form\">\r\n                    <div class=\"input-group\">\r\n                        <label>üë§ Username</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter username\"\r\n                            class=\"form-input username-input\"\r\n                            data-server-id=\"${server.id}\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div class=\"input-group\">\r\n                        <label>üîí Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            placeholder=\"Enter password\"\r\n                            class=\"form-input password-input\"\r\n                            data-server-id=\"${server.id}\"\r\n                        />\r\n                    </div>\r\n\r\n                    <button\r\n                        class=\"connect-btn\"\r\n                        data-server-id=\"${server.id}\"\r\n                        onclick=\"dashboard.handleConnect(${server.id})\"\r\n                    >\r\n                        <span>üîó</span>\r\n                        <span>Connect</span>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- Connection Status -->\r\n                <div class=\"connection-status\">\r\n                    <div class=\"status-dot-small\"></div>\r\n                    <span>Ready to connect</span>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    attachEventListeners() {\r\n        // Add Enter key support for password inputs\r\n        const passwordInputs = this.container.querySelectorAll('.password-input');\r\n        passwordInputs.forEach(input => {\r\n            input.addEventListener('keypress', (e) => {\r\n                if (e.key === 'Enter') {\r\n                    const serverId = parseInt(input.dataset.serverId);\r\n                    this.handleConnect(serverId);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Track input changes\r\n        const allInputs = this.container.querySelectorAll('.form-input');\r\n        allInputs.forEach(input => {\r\n            input.addEventListener('input', (e) => {\r\n                const serverId = parseInt(input.dataset.serverId);\r\n                const field = input.classList.contains('username-input') ? 'username' : 'password';\r\n                this.updateConnection(serverId, field, e.target.value);\r\n            });\r\n        });\r\n    }\r\n\r\n    updateConnection(serverId, field, value) {\r\n        if (!this.connections[serverId]) {\r\n            this.connections[serverId] = {};\r\n        }\r\n        this.connections[serverId][field] = value;\r\n    }\r\n\r\n    async handleConnect(serverId) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        const credentials = this.connections[serverId];\r\n        \r\n        if (!credentials?.username || !credentials?.password) {\r\n            alert('Please enter both username and password');\r\n            return;\r\n        }\r\n\r\n        // Set loading state\r\n        this.setLoading(serverId, true);\r\n\r\n        try {\r\n            // Create terminal page URL with connection details\r\n            const terminalUrl = `/terminal?host=${server.ip}&username=${encodeURIComponent(credentials.username)}&password=${encodeURIComponent(credentials.password)}&server=${encodeURIComponent(server.name)}`;\r\n            \r\n            // Open terminal in new tab\r\n            const newWindow = window.open(terminalUrl, '_blank');\r\n            \r\n            if (!newWindow) {\r\n                alert('Please allow popups for this site to open terminal windows');\r\n            } else {\r\n                // Clear password for security\r\n                const passwordInput = this.container.querySelector(`.password-input[data-server-id=\"${serverId}\"]`);\r\n                if (passwordInput) {\r\n                    passwordInput.value = '';\r\n                    this.updateConnection(serverId, 'password', '');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Connection error:', error);\r\n            alert('Failed to open terminal connection');\r\n        } finally {\r\n            this.setLoading(serverId, false);\r\n        }\r\n    }\r\n\r\n    setLoading(serverId, isLoading) {\r\n        this.loading[serverId] = isLoading;\r\n        const button = this.container.querySelector(`.connect-btn[data-server-id=\"${serverId}\"]`);\r\n        \r\n        if (isLoading) {\r\n            button.innerHTML = `\r\n                <div class=\"spinner\"></div>\r\n                <span>Connecting...</span>\r\n            `;\r\n            button.disabled = true;\r\n            button.classList.add('loading');\r\n        } else {\r\n            button.innerHTML = `\r\n                <span>üîó</span>\r\n                <span>Connect</span>\r\n            `;\r\n            button.disabled = false;\r\n            button.classList.remove('loading');\r\n        }\r\n    }\r\n\r\n    addStyles() {\r\n        if (document.getElementById('dashboard-styles')) return;\r\n\r\n        const style = document.createElement('style');\r\n        style.id = 'dashboard-styles';\r\n        style.textContent = `\r\n            .dashboard-container {\r\n                min-height: 100vh;\r\n                background: linear-gradient(135deg, #0f172a 0%, #1e3a8a 50%, #0f172a 100%);\r\n                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            }\r\n\r\n            .dashboard-header {\r\n                background: rgba(30, 41, 59, 0.5);\r\n                backdrop-filter: blur(10px);\r\n                border-bottom: 1px solid #374151;\r\n            }\r\n\r\n            .header-content {\r\n                max-width: 1200px;\r\n                margin: 0 auto;\r\n                padding: 1rem 1.5rem;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: space-between;\r\n            }\r\n\r\n            .header-left {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.75rem;\r\n            }\r\n\r\n            .terminal-icon {\r\n                font-size: 2rem;\r\n                color: #60a5fa;\r\n            }\r\n\r\n            .dashboard-header h1 {\r\n                font-size: 1.5rem;\r\n                font-weight: bold;\r\n                color: white;\r\n            }\r\n\r\n            .status-indicator {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.5rem;\r\n                color: #10b981;\r\n                font-size: 0.875rem;\r\n            }\r\n\r\n            .status-dot {\r\n                width: 8px;\r\n                height: 8px;\r\n                background: #10b981;\r\n                border-radius: 50%;\r\n                animation: pulse 2s infinite;\r\n            }\r\n\r\n            .dashboard-main {\r\n                max-width: 1200px;\r\n                margin: 0 auto;\r\n                padding: 2rem 1.5rem;\r\n            }\r\n\r\n            .dashboard-intro {\r\n                margin-bottom: 2rem;\r\n            }\r\n\r\n            .dashboard-intro h2 {\r\n                font-size: 1.25rem;\r\n                font-weight: 600;\r\n                color: white;\r\n                margin-bottom: 0.5rem;\r\n            }\r\n\r\n            .dashboard-intro p {\r\n                color: #94a3b8;\r\n            }\r\n\r\n            .servers-grid {\r\n                display: grid;\r\n                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\r\n                gap: 1.5rem;\r\n                margin-bottom: 2rem;\r\n            }\r\n\r\n            .server-card {\r\n                background: rgba(30, 41, 59, 0.5);\r\n                backdrop-filter: blur(10px);\r\n                border: 1px solid #374151;\r\n                border-radius: 0.75rem;\r\n                padding: 1.5rem;\r\n                transition: all 0.3s ease;\r\n            }\r\n\r\n            .server-card:hover {\r\n                border-color: rgba(59, 130, 246, 0.5);\r\n                transform: translateY(-2px);\r\n            }\r\n\r\n            .server-header {\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.75rem;\r\n                margin-bottom: 1rem;\r\n            }\r\n\r\n            .server-icon {\r\n                background: rgba(59, 130, 246, 0.2);\r\n                padding: 0.5rem;\r\n                border-radius: 0.5rem;\r\n                font-size: 1.5rem;\r\n            }\r\n\r\n            .server-info h3 {\r\n                font-size: 1.125rem;\r\n                font-weight: 600;\r\n                color: white;\r\n            }\r\n\r\n            .server-ip {\r\n                color: #60a5fa;\r\n                font-family: 'Courier New', monospace;\r\n                font-size: 0.875rem;\r\n                margin-top: 0.25rem;\r\n            }\r\n\r\n            .connection-form {\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 1rem;\r\n            }\r\n\r\n            .input-group {\r\n                display: flex;\r\n                flex-direction: column;\r\n            }\r\n\r\n            .input-group label {\r\n                color: #d1d5db;\r\n                font-size: 0.875rem;\r\n                font-weight: 500;\r\n                margin-bottom: 0.5rem;\r\n            }\r\n\r\n            .form-input {\r\n                width: 100%;\r\n                padding: 0.5rem 0.75rem;\r\n                background: rgba(51, 65, 85, 0.5);\r\n                border: 1px solid #4b5563;\r\n                border-radius: 0.5rem;\r\n                color: white;\r\n                font-size: 0.875rem;\r\n                transition: all 0.2s ease;\r\n            }\r\n\r\n            .form-input::placeholder {\r\n                color: #9ca3af;\r\n            }\r\n\r\n            .form-input:focus {\r\n                outline: none;\r\n                border-color: #3b82f6;\r\n                box-shadow: 0 0 0 1px #3b82f6;\r\n            }\r\n\r\n            .connect-btn {\r\n                width: 100%;\r\n                background: linear-gradient(to right, #2563eb, #1d4ed8);\r\n                color: white;\r\n                font-weight: 500;\r\n                padding: 0.625rem 1rem;\r\n                border: none;\r\n                border-radius: 0.5rem;\r\n                cursor: pointer;\r\n                transition: all 0.2s ease;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                gap: 0.5rem;\r\n                font-size: 0.875rem;\r\n            }\r\n\r\n            .connect-btn:hover:not(:disabled) {\r\n                background: linear-gradient(to right, #1d4ed8, #1e40af);\r\n                transform: translateY(-1px);\r\n            }\r\n\r\n            .connect-btn:disabled {\r\n                background: linear-gradient(to right, #475569, #374151);\r\n                cursor: not-allowed;\r\n                transform: none;\r\n            }\r\n\r\n            .spinner {\r\n                width: 16px;\r\n                height: 16px;\r\n                border: 2px solid rgba(255, 255, 255, 0.3);\r\n                border-top: 2px solid white;\r\n                border-radius: 50%;\r\n                animation: spin 1s linear infinite;\r\n            }\r\n\r\n            .connection-status {\r\n                margin-top: 1rem;\r\n                padding-top: 1rem;\r\n                border-top: 1px solid #374151;\r\n                display: flex;\r\n                align-items: center;\r\n                gap: 0.5rem;\r\n            }\r\n\r\n            .status-dot-small {\r\n                width: 8px;\r\n                height: 8px;\r\n                background: #6b7280;\r\n                border-radius: 50%;\r\n            }\r\n\r\n            .connection-status span {\r\n                color: #9ca3af;\r\n                font-size: 0.75rem;\r\n            }\r\n\r\n            .instructions-card {\r\n                background: rgba(30, 41, 59, 0.3);\r\n                border: 1px solid #374151;\r\n                border-radius: 0.75rem;\r\n                padding: 1.5rem;\r\n            }\r\n\r\n            .instructions-card h3 {\r\n                font-size: 1.125rem;\r\n                font-weight: 600;\r\n                color: white;\r\n                margin-bottom: 0.75rem;\r\n            }\r\n\r\n            .instructions-list {\r\n                color: #d1d5db;\r\n                line-height: 1.6;\r\n            }\r\n\r\n            .instructions-list p {\r\n                margin: 0.5rem 0;\r\n            }\r\n\r\n            @keyframes pulse {\r\n                0%, 100% { opacity: 1; }\r\n                50% { opacity: 0.5; }\r\n            }\r\n\r\n            @keyframes spin {\r\n                0% { transform: rotate(0deg); }\r\n                100% { transform: rotate(360deg); }\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                .servers-grid {\r\n                    grid-template-columns: 1fr;\r\n                }\r\n                .dashboard-main {\r\n                    padding: 1rem;\r\n                }\r\n            }\r\n        `;\r\n        \r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    handleInputChange(serverId, field, value) {\r\n        if (!this.connections[serverId]) {\r\n            this.connections[serverId] = {};\r\n        }\r\n        this.connections[serverId][field] = value;\r\n    }\r\n\r\n    async handleConnect(serverId) {\r\n        const server = this.servers.find(s => s.id === serverId);\r\n        const credentials = this.connections[serverId];\r\n        \r\n        if (!credentials?.username || !credentials?.password) {\r\n            alert('Please enter both username and password');\r\n            return;\r\n        }\r\n\r\n        this.setLoading(serverId, true);\r\n\r\n        try {\r\n            // Create terminal page URL with connection details\r\n            const terminalUrl = `/terminal?host=${server.ip}&username=${encodeURIComponent(credentials.username)}&password=${encodeURIComponent(credentials.password)}&server=${encodeURIComponent(server.name)}`;\r\n            \r\n            // Open terminal in new tab\r\n            const newWindow = window.open(terminalUrl, '_blank');\r\n            \r\n            if (!newWindow) {\r\n                alert('Please allow popups for this site to open terminal windows');\r\n            } else {\r\n                // Clear password for security\r\n                const passwordInput = this.container.querySelector(`.password-input[data-server-id=\"${serverId}\"]`);\r\n                if (passwordInput) {\r\n                    passwordInput.value = '';\r\n                    this.handleInputChange(serverId, 'password', '');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Connection error:', error);\r\n            alert('Failed to open terminal connection');\r\n        } finally {\r\n            this.setLoading(serverId, false);\r\n        }\r\n    }\r\n\r\n    setLoading(serverId, isLoading) {\r\n        this.loading[serverId] = isLoading;\r\n        const button = this.container.querySelector(`.connect-btn[data-server-id=\"${serverId}\"]`);\r\n        \r\n        if (isLoading) {\r\n            button.innerHTML = `\r\n                <div class=\"spinner\"></div>\r\n                <span>Connecting...</span>\r\n            `;\r\n            button.disabled = true;\r\n        } else {\r\n            button.innerHTML = `\r\n                <span>üîó</span>\r\n                <span>Connect</span>\r\n            `;\r\n            button.disabled = false;\r\n        }\r\n    }\r\n}\r\n\r\n// Usage: Create dashboard when page loads\r\nlet dashboard;\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    dashboard = new StudentDashboard('dashboard-root');\r\n    \r\n    // Attach input listeners\r\n    document.addEventListener('input', function(e) {\r\n        if (e.target.classList.contains('form-input')) {\r\n            const serverId = parseInt(e.target.dataset.serverId);\r\n            const field = e.target.classList.contains('username-input') ? 'username' : 'password';\r\n            dashboard.handleInputChange(serverId, field, e.target.value);\r\n        }\r\n    });\r\n});\r\n\r\n// Export for use in other files\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = StudentDashboard;\r\n}"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IAED1D,QAAQ,CAAC2D,IAAI,CAACC,WAAW,CAACJ,KAAK,CAAC;EACpC;EAEAK,iBAAiBA,CAACrC,QAAQ,EAAEK,KAAK,EAAEK,KAAK,EAAE;IACtC,IAAI,CAAC,IAAI,CAAChC,WAAW,CAACsB,QAAQ,CAAC,EAAE;MAC7B,IAAI,CAACtB,WAAW,CAACsB,QAAQ,CAAC,GAAG,CAAC,CAAC;IACnC;IACA,IAAI,CAACtB,WAAW,CAACsB,QAAQ,CAAC,CAACK,KAAK,CAAC,GAAGK,KAAK;EAC7C;EAEA,MAAMP,aAAaA,CAACH,QAAQ,EAAE;IAC1B,MAAMX,MAAM,GAAG,IAAI,CAACT,OAAO,CAAC+B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/B,EAAE,KAAKmB,QAAQ,CAAC;IACxD,MAAMa,WAAW,GAAG,IAAI,CAACnC,WAAW,CAACsB,QAAQ,CAAC;IAE9C,IAAI,EAACa,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEC,QAAQ,KAAI,EAACD,WAAW,aAAXA,WAAW,eAAXA,WAAW,CAAEE,QAAQ,GAAE;MAClDC,KAAK,CAAC,yCAAyC,CAAC;MAChD;IACJ;IAEA,IAAI,CAACC,UAAU,CAACjB,QAAQ,EAAE,IAAI,CAAC;IAE/B,IAAI;MACA;MACA,MAAMkB,WAAW,GAAG,kBAAkB7B,MAAM,CAACP,EAAE,aAAaqC,kBAAkB,CAACN,WAAW,CAACC,QAAQ,CAAC,aAAaK,kBAAkB,CAACN,WAAW,CAACE,QAAQ,CAAC,WAAWI,kBAAkB,CAAC9B,MAAM,CAACN,IAAI,CAAC,EAAE;;MAErM;MACA,MAAMqC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACJ,WAAW,EAAE,QAAQ,CAAC;MAEpD,IAAI,CAACE,SAAS,EAAE;QACZJ,KAAK,CAAC,4DAA4D,CAAC;MACvE,CAAC,MAAM;QACH;QACA,MAAMO,aAAa,GAAG,IAAI,CAAChD,SAAS,CAACiD,aAAa,CAAC,mCAAmCxB,QAAQ,IAAI,CAAC;QACnG,IAAIuB,aAAa,EAAE;UACfA,aAAa,CAACb,KAAK,GAAG,EAAE;UACxB,IAAI,CAAC2B,iBAAiB,CAACrC,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC;QACpD;MACJ;IACJ,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCT,KAAK,CAAC,oCAAoC,CAAC;IAC/C,CAAC,SAAS;MACN,IAAI,CAACC,UAAU,CAACjB,QAAQ,EAAE,KAAK,CAAC;IACpC;EACJ;EAEAiB,UAAUA,CAACjB,QAAQ,EAAE2B,SAAS,EAAE;IAC5B,IAAI,CAAChD,OAAO,CAACqB,QAAQ,CAAC,GAAG2B,SAAS;IAClC,MAAMC,MAAM,GAAG,IAAI,CAACrD,SAAS,CAACiD,aAAa,CAAC,gCAAgCxB,QAAQ,IAAI,CAAC;IAEzF,IAAI2B,SAAS,EAAE;MACXC,MAAM,CAACzC,SAAS,GAAG;AAC/B;AACA;AACA,aAAa;MACDyC,MAAM,CAACC,QAAQ,GAAG,IAAI;IAC1B,CAAC,MAAM;MACHD,MAAM,CAACzC,SAAS,GAAG;AAC/B;AACA;AACA,aAAa;MACDyC,MAAM,CAACC,QAAQ,GAAG,KAAK;IAC3B;EACJ;AACJ;;AAEA;AACA,IAAIS,SAAS;AACb9D,QAAQ,CAACqB,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACrDyC,SAAS,GAAG,IAAIlE,gBAAgB,CAAC,gBAAgB,CAAC;;EAElD;EACAI,QAAQ,CAACqB,gBAAgB,CAAC,OAAO,EAAE,UAASC,CAAC,EAAE;IAC3C,IAAIA,CAAC,CAACW,MAAM,CAACH,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;MAC3C,MAAMP,QAAQ,GAAGC,QAAQ,CAACH,CAAC,CAACW,MAAM,CAACP,OAAO,CAACF,QAAQ,CAAC;MACpD,MAAMK,KAAK,GAAGP,CAAC,CAACW,MAAM,CAACH,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,UAAU,GAAG,UAAU;MACrF+B,SAAS,CAACD,iBAAiB,CAACrC,QAAQ,EAAEK,KAAK,EAAEP,CAAC,CAACW,MAAM,CAACC,KAAK,CAAC;IAChE;EACJ,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,IAAI,OAAO6B,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,OAAO,EAAE;EACjDD,MAAM,CAACC,OAAO,GAAGpE,gBAAgB;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}