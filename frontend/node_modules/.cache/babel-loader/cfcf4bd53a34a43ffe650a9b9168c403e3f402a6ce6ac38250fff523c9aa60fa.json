{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kavindu\\\\Desktop\\\\ssh-project-slt\\\\frontend\\\\src\\\\pages\\\\TerminalPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { Terminal } from \"xterm\";\nimport \"xterm/css/xterm.css\";\nimport { FitAddon } from 'xterm-addon-fit';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = \"http://localhost:5000\";\n\n// GLOBAL SINGLETON PATTERN - Prevent multiple instances\nlet globalTerminalInstance = null;\nlet globalSocketInstance = null;\nlet globalIsInitialized = false;\nlet globalFitAddon = null;\nlet globalInputHandler = null;\nlet globalKeyHandler = null;\nconst TerminalPage = () => {\n  _s();\n  var _connectionData$sessi;\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionData, setConnectionData] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [connectionStatus, setConnectionStatus] = useState(\"initializing\");\n\n  // Refs that don't cause re-renders\n  const terminalRef = useRef();\n  const terminalInstance = useRef();\n  const socketRef = useRef();\n  const fitAddonRef = useRef();\n  const isInitializedRef = useRef(false);\n  const inputHandlerRef = useRef(null); // Track input handler to prevent duplicates\n  const keyHandlerRef = useRef(null); // Track key handler to prevent duplicates\n\n  const getStoredUserData = useCallback(() => {\n    try {\n      const userData = localStorage.getItem('user');\n      const token = localStorage.getItem('token');\n      if (userData) {\n        const user = JSON.parse(userData);\n        return {\n          token: token || '',\n          userId: user.id || '',\n          userEmail: user.email || '',\n          userName: user.name || '',\n          registeredId: user.registered_id || '',\n          userRole: user.role || 'student'\n        };\n      }\n    } catch (err) {\n      console.warn(\"Could not retrieve stored user data:\", err);\n    }\n    return {};\n  }, []);\n  const connectToSSHServer = useCallback((socketInstance, data, term) => {\n    if (!socketInstance || !data) {\n      console.error(\"Missing socket instance or connection data\");\n      term.write(`‚ùå Cannot connect: Missing connection data\\r\\n`);\n      return;\n    }\n    console.log(\"üîó Attempting SSH connection with data:\", data);\n    const sshConnectionData = {\n      host: data.host,\n      username: data.username,\n      password: data.password,\n      port: data.port || 22,\n      user: {\n        id: data.userId,\n        name: data.userName,\n        email: data.userEmail,\n        registered_id: data.registeredId,\n        role: data.userRole\n      },\n      session: {\n        id: data.sessionId,\n        token: data.token,\n        connectionTime: data.connectionTime,\n        serverName: data.serverName,\n        dashboardUrl: data.dashboardUrl\n      },\n      browser: {\n        userAgent: data.browserInfo || navigator.userAgent,\n        windowId: window.name,\n        referrer: document.referrer\n      }\n    };\n    term.write(`üîó Connecting to SSH server...\\r\\n`);\n    term.write(`üì° Host: ${data.host}:${data.port || 22}\\r\\n`);\n    term.write(`üë§ User: ${data.username}\\r\\n`);\n    term.write(`üîê Authenticating...\\r\\n\\r\\n`);\n    console.log(\"üì§ Sending SSH connection data:\", sshConnectionData);\n\n    // Send connection requests - but only once per connection\n    socketInstance.emit(\"ssh-connect\", sshConnectionData);\n    socketInstance.emit(\"ssh-connect-enhanced\", sshConnectionData);\n    socketInstance.emit(\"connect-ssh\", sshConnectionData);\n    socketInstance.emit(\"user-activity\", {\n      type: 'terminal_access',\n      userId: data.userId,\n      userName: data.userName,\n      action: 'ssh_connect_attempt',\n      target: data.host,\n      timestamp: new Date().toISOString(),\n      sessionId: data.sessionId\n    });\n    const timeoutId = setTimeout(() => {\n      term.write(`‚è±Ô∏è Connection is taking longer than expected...\\r\\n`);\n      term.write(`üí° Check if your backend server is handling SSH connections properly\\r\\n\\r\\n`);\n    }, 10000);\n    return timeoutId;\n  }, []); // NO DEPENDENCIES to prevent recreation\n\n  const cleanupConnection = useCallback(() => {\n    console.log(\"üßπ GLOBAL CLEANUP: Cleaning up connection...\");\n\n    // Clean up global input handlers\n    if (globalInputHandler) {\n      console.log(\"üóëÔ∏è Disposing GLOBAL input handler...\");\n      globalInputHandler.dispose();\n      globalInputHandler = null;\n    }\n    if (globalKeyHandler) {\n      console.log(\"üóëÔ∏è Disposing GLOBAL key handler...\");\n      globalKeyHandler.dispose();\n      globalKeyHandler = null;\n    }\n\n    // Clean up global socket\n    if (globalSocketInstance) {\n      console.log(\"üóëÔ∏è Cleaning up GLOBAL socket...\");\n      globalSocketInstance.removeAllListeners();\n      globalSocketInstance.disconnect();\n      globalSocketInstance = null;\n    }\n\n    // Clean up global terminal\n    if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\n      console.log(\"üóëÔ∏è Disposing GLOBAL terminal...\");\n      globalTerminalInstance.dispose();\n      globalTerminalInstance = null;\n    }\n\n    // Reset global flags\n    globalIsInitialized = false;\n    globalFitAddon = null;\n\n    // Clean up session storage\n    Object.keys(sessionStorage).forEach(key => {\n      if (key.startsWith('terminal_')) {\n        sessionStorage.removeItem(key);\n      }\n    });\n    console.log(\"‚úÖ GLOBAL cleanup complete\");\n  }, []);\n  const initializeTerminal = useCallback(data => {\n    // GLOBAL SINGLETON CHECK - Prevent multiple instances across ALL React renders\n    if (globalIsInitialized) {\n      console.log(\"üõë GLOBAL BLOCK: Terminal already exists globally, using existing instance\");\n\n      // If we have existing global instances, just update refs and state\n      if (globalTerminalInstance && terminalRef.current && !globalTerminalInstance.isDisposed) {\n        var _globalSocketInstance, _globalSocketInstance2;\n        terminalInstance.current = globalTerminalInstance;\n        socketRef.current = globalSocketInstance;\n        setIsConnected(!!((_globalSocketInstance = globalSocketInstance) !== null && _globalSocketInstance !== void 0 && _globalSocketInstance.connected));\n        setConnectionStatus((_globalSocketInstance2 = globalSocketInstance) !== null && _globalSocketInstance2 !== void 0 && _globalSocketInstance2.connected ? \"ssh-connected\" : \"connected\");\n      }\n      return;\n    }\n    console.log(\"üöÄ GLOBAL INIT: Creating SINGLE terminal instance globally\");\n    globalIsInitialized = true; // Set GLOBAL flag immediately\n    isInitializedRef.current = true; // Set local flag too\n    setConnectionStatus(\"connecting\");\n\n    // Create GLOBAL fitAddon only once\n    if (!globalFitAddon) {\n      globalFitAddon = new FitAddon();\n    }\n\n    // Initialize Terminal with DISABLED local echo\n    const term = new Terminal({\n      cursorBlink: true,\n      theme: {\n        background: '#000000',\n        foreground: '#ffffff',\n        cursor: '#ffffff',\n        selection: '#ffffff40',\n        black: '#000000',\n        red: '#e74c3c',\n        green: '#2ecc71',\n        yellow: '#f1c40f',\n        blue: '#3498db',\n        magenta: '#9b59b6',\n        cyan: '#1abc9c',\n        white: '#ecf0f1'\n      },\n      fontSize: 14,\n      fontFamily: 'Consolas, Monaco, \"Courier New\", monospace',\n      rows: 30,\n      cols: 120,\n      scrollback: 1000,\n      convertEol: true,\n      disableStdin: false,\n      localEcho: false // No local echo\n    });\n    term.loadAddon(globalFitAddon);\n    if (terminalRef.current) {\n      term.open(terminalRef.current);\n      globalFitAddon.fit();\n\n      // Set GLOBAL references\n      globalTerminalInstance = term;\n      terminalInstance.current = term;\n      term.write('üöÄ GLOBAL TERMINAL: Initializing (ONCE)...\\r\\n');\n      term.write(`üì° Connecting to ${SERVER_URL}...\\r\\n\\r\\n`);\n    }\n\n    // Clean up existing GLOBAL socket before creating new one\n    if (globalSocketInstance) {\n      globalSocketInstance.removeAllListeners();\n      globalSocketInstance.disconnect();\n    }\n\n    // Initialize Socket.IO as GLOBAL instance\n    const newSocket = io(SERVER_URL, {\n      query: {\n        userId: data.userId || '',\n        userName: data.userName || '',\n        userRole: data.userRole || 'student'\n      },\n      timeout: 10000,\n      forceNew: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Set GLOBAL socket reference\n    globalSocketInstance = newSocket;\n    socketRef.current = newSocket;\n\n    // Socket event listeners - ADD ONCE FLAG to prevent duplicate events\n    let sshConnectedHandled = false;\n    newSocket.on(\"connect\", () => {\n      console.log(\"‚úÖ GLOBAL SOCKET: Connected to terminal server\");\n      setIsConnected(true);\n      setConnectionStatus(\"connected\");\n      term.write(`‚úÖ Socket connected to ${SERVER_URL}\\r\\n`);\n      term.write(`üîó Establishing SSH connection...\\r\\n\\r\\n`);\n      connectToSSHServer(newSocket, data, term);\n    });\n    newSocket.on(\"ssh-output\", outputData => {\n      if (term && !term.isDisposed) {\n        term.write(outputData);\n      }\n    });\n    newSocket.on(\"ssh-connected\", info => {\n      // PREVENT DUPLICATE SSH CONNECTED MESSAGES\n      if (sshConnectedHandled) {\n        console.log(\"‚ö†Ô∏è SSH connected event already handled globally, ignoring duplicate\");\n        return;\n      }\n      sshConnectedHandled = true;\n      console.log(\"üéâ GLOBAL SSH: Connection established (ONCE ONLY)\");\n      setConnectionStatus(\"ssh-connected\");\n      setError(\"\");\n      term.write(`\\r\\nüéâ SSH CONNECTION ESTABLISHED! üéâ\\r\\n`);\n      term.write(`‚úÖ Connected to: ${info.host || data.host}\\r\\n`);\n      term.write(`üë§ User: ${data.userName || 'Unknown'}\\r\\n`);\n      term.write(`üÜî ID: ${data.registeredId || 'No ID'}\\r\\n`);\n      term.write(`‚è∞ Time: ${new Date().toLocaleString()}\\r\\n`);\n      term.write(`${'='.repeat(50)}\\r\\n`);\n      term.write(`üí° You can now run commands like: pwd, ls, whoami\\r\\n`);\n      term.write(`${'='.repeat(50)}\\r\\n\\r\\n`);\n    });\n    newSocket.on(\"ssh-error\", errorData => {\n      const errorMsg = errorData.message || errorData;\n      term.write(`\\r\\n‚ùå SSH Connection Error: ${errorMsg}\\r\\n`);\n      term.write(`\\r\\nüîÑ Retrying connection in 3 seconds...\\r\\n`);\n      setConnectionStatus(\"error\");\n      setError(errorMsg);\n      setTimeout(() => {\n        if (globalSocketInstance && data) {\n          connectToSSHServer(globalSocketInstance, data, term);\n        }\n      }, 3000);\n    });\n    newSocket.on(\"ssh-disconnected\", () => {\n      term.write(\"\\r\\nüîå SSH connection closed\\r\\n\");\n      setConnectionStatus(\"disconnected\");\n      setIsConnected(false);\n    });\n    newSocket.on(\"disconnect\", reason => {\n      setIsConnected(false);\n      setConnectionStatus(\"disconnected\");\n      term.write(`\\r\\n[Socket disconnected: ${reason}]\\r\\n`);\n      if (reason !== 'io client disconnect') {\n        setTimeout(() => {\n          if (globalSocketInstance && !globalSocketInstance.connected) {\n            term.write(`\\r\\nüîÑ Attempting to reconnect...\\r\\n`);\n            globalSocketInstance.connect();\n          }\n        }, 2000);\n      }\n    });\n    newSocket.on(\"connect_error\", err => {\n      const errorMsg = `Connection error: ${err.message}`;\n      setError(errorMsg);\n      setConnectionStatus(\"error\");\n      term.write(`\\r\\n‚ùå ${errorMsg}\\r\\n`);\n      term.write(`\\r\\nüí° Make sure your backend server is running on ${SERVER_URL}\\r\\n`);\n    });\n\n    // CRITICAL FIX: Dispose any existing GLOBAL handlers first\n    if (globalInputHandler) {\n      globalInputHandler.dispose();\n      globalInputHandler = null;\n      console.log(\"üóëÔ∏è Disposed existing GLOBAL input handler\");\n    }\n    if (globalKeyHandler) {\n      globalKeyHandler.dispose();\n      globalKeyHandler = null;\n      console.log(\"üóëÔ∏è Disposed existing GLOBAL key handler\");\n    }\n\n    // GLOBAL INPUT HANDLER - Attach only once globally\n    globalInputHandler = term.onData(input => {\n      console.log(\"üéØ GLOBAL INPUT (single handler):\", input);\n      if (newSocket && newSocket.connected) {\n        // Send raw input without any local echo\n        newSocket.emit(\"ssh-input\", input);\n        console.log(\"üì§ GLOBAL SEND (single emit):\", input);\n      } else {\n        term.write(`\\r\\n‚ùå Not connected to server. Cannot send input.\\r\\n`);\n      }\n    });\n\n    // GLOBAL KEY HANDLER - Only for special keys like Ctrl+C\n    globalKeyHandler = term.onKey(({\n      key,\n      domEvent\n    }) => {\n      // Only handle Ctrl+C specifically, nothing else\n      if (domEvent.ctrlKey && domEvent.key === 'c') {\n        if (newSocket && newSocket.connected) {\n          newSocket.emit(\"ssh-input\", '\\x03'); // Send interrupt signal\n          console.log(\"üì§ GLOBAL CTRL+C sent\");\n        }\n      }\n      // DON'T handle any other keys to prevent duplication\n    });\n\n    // Handle window resize - using GLOBAL ref to prevent recreation\n    const handleResize = () => {\n      if (term && term.element && globalFitAddon && !term.isDisposed) {\n        try {\n          globalFitAddon.fit();\n        } catch (fitError) {\n          console.warn(\"Fit error:\", fitError);\n          // Fallback resize logic\n          if (terminalRef.current) {\n            const cols = Math.floor(terminalRef.current.clientWidth / 9);\n            const rows = Math.floor(terminalRef.current.clientHeight / 17);\n            term.resize(cols, rows);\n          }\n        }\n      }\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Return cleanup function\n    return () => {\n      console.log(\"üßπ Local cleanup function called...\");\n      window.removeEventListener('resize', handleResize);\n\n      // Don't clean up global instances here - only in cleanupConnection\n      // Just remove local references\n      terminalInstance.current = null;\n      socketRef.current = null;\n    };\n  }, [connectToSSHServer]);\n  const initializeConnection = useCallback(() => {\n    // Prevent multiple initializations\n    if (isInitializedRef.current) {\n      console.log(\"Connection already initialized, skipping...\");\n      return;\n    }\n    try {\n      const urlParams = new URLSearchParams(window.location.search);\n      let data = null;\n\n      // Check for sessionKey method first\n      const sessionKey = urlParams.get('sessionKey');\n      if (sessionKey) {\n        const sessionData = sessionStorage.getItem(sessionKey);\n        if (sessionData) {\n          data = JSON.parse(sessionData);\n          sessionStorage.removeItem(sessionKey);\n        }\n      }\n\n      // Fallback to direct URL data\n      if (!data) {\n        const urlData = urlParams.get('data') || urlParams.get('fallbackData');\n        if (urlData) {\n          data = JSON.parse(decodeURIComponent(urlData));\n        }\n      }\n\n      // Old format compatibility\n      if (!data) {\n        const host = urlParams.get('host');\n        const username = urlParams.get('username');\n        const password = urlParams.get('password');\n        const serverName = urlParams.get('serverName');\n        const token = urlParams.get('token');\n        const userId = urlParams.get('userId');\n        if (host && username && password) {\n          data = {\n            host,\n            username,\n            password,\n            serverName,\n            token,\n            userId,\n            ...getStoredUserData()\n          };\n        }\n      }\n\n      // SessionStorage fallback\n      if (!data) {\n        const stored = sessionStorage.getItem('terminalConnection');\n        if (stored) {\n          data = JSON.parse(stored);\n        }\n      }\n      if (data) {\n        console.log(\"Setting connection data:\", data);\n        setConnectionData(data);\n      } else {\n        setError(\"No connection data provided. Please return to the dashboard and try again.\");\n      }\n    } catch (err) {\n      console.error(\"Error initializing connection:\", err);\n      setError(\"Failed to initialize connection data\");\n    }\n  }, [getStoredUserData]);\n\n  // Separate useEffect for initial connection data loading - NO DEPENDENCIES\n  useEffect(() => {\n    if (!isInitializedRef.current) {\n      console.log(\"üîÑ Loading initial connection data (ONCE)...\");\n      initializeConnection();\n    }\n  }, []); // COMPLETELY EMPTY - run only once on mount\n\n  // Separate useEffect for terminal initialization - NO DEPENDENCIES  \n  useEffect(() => {\n    if (connectionData && !globalIsInitialized) {\n      console.log(\"üöÄ GLOBAL CHECK: Initializing terminal with connection data (ONCE)...\");\n      const cleanup = initializeTerminal(connectionData);\n      return cleanup;\n    } else if (connectionData && globalIsInitialized) {\n      console.log(\"üîÑ GLOBAL EXISTS: Connecting to existing terminal instance\");\n      // Connect to existing global terminal\n      if (globalTerminalInstance && terminalRef.current && !globalTerminalInstance.isDisposed) {\n        var _globalSocketInstance3, _globalSocketInstance4;\n        globalTerminalInstance.open(terminalRef.current);\n        terminalInstance.current = globalTerminalInstance;\n        socketRef.current = globalSocketInstance;\n        setIsConnected(!!((_globalSocketInstance3 = globalSocketInstance) !== null && _globalSocketInstance3 !== void 0 && _globalSocketInstance3.connected));\n        setConnectionStatus((_globalSocketInstance4 = globalSocketInstance) !== null && _globalSocketInstance4 !== void 0 && _globalSocketInstance4.connected ? \"ssh-connected\" : \"connected\");\n      }\n    }\n  }, [connectionData]); // ONLY connectionData dependency\n\n  // Handle postMessage communication\n  useEffect(() => {\n    const handleMessage = event => {\n      if (event.data && event.data.type === 'TERMINAL_CONNECTION_DATA') {\n        if (!isInitializedRef.current) {\n          setConnectionData(event.data.data);\n        }\n      }\n    };\n    window.addEventListener('message', handleMessage);\n    return () => {\n      window.removeEventListener('message', handleMessage);\n    };\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      console.log(\"Component unmounting, cleaning up...\");\n      cleanupConnection();\n    };\n  }, [cleanupConnection]);\n  const handleDisconnect = useCallback(() => {\n    if (globalSocketInstance) {\n      globalSocketInstance.emit(\"user-disconnect\", {\n        userId: connectionData === null || connectionData === void 0 ? void 0 : connectionData.userId,\n        userName: connectionData === null || connectionData === void 0 ? void 0 : connectionData.userName,\n        sessionId: connectionData === null || connectionData === void 0 ? void 0 : connectionData.sessionId,\n        disconnectTime: new Date().toISOString(),\n        disconnectReason: 'user_initiated'\n      });\n      globalSocketInstance.disconnect();\n    }\n    cleanupConnection();\n    window.close();\n  }, [connectionData, cleanupConnection]);\n  const handleReconnect = useCallback(() => {\n    if (connectionData) {\n      console.log(\"üîÑ Starting reconnection process...\");\n      setError(\"\");\n      setConnectionStatus(\"reconnecting\");\n\n      // CRITICAL: Clean up ALL global handlers first\n      if (globalInputHandler) {\n        globalInputHandler.dispose();\n        globalInputHandler = null;\n        console.log(\"‚úÖ Input handler disposed for reconnect\");\n      }\n      if (globalKeyHandler) {\n        globalKeyHandler.dispose();\n        globalKeyHandler = null;\n        console.log(\"‚úÖ Key handler disposed for reconnect\");\n      }\n\n      // Reset initialization flags BEFORE cleanup\n      globalIsInitialized = false;\n      isInitializedRef.current = false;\n      if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\n        globalTerminalInstance.clear();\n        globalTerminalInstance.write(\"üîÑ Reconnecting...\\r\\n\");\n      }\n\n      // Clean up existing connection\n      if (globalSocketInstance) {\n        globalSocketInstance.removeAllListeners();\n        globalSocketInstance.disconnect();\n        globalSocketInstance = null;\n      }\n      if (globalTerminalInstance) {\n        globalTerminalInstance.dispose();\n        globalTerminalInstance = null;\n      }\n\n      // Reinitialize after cleanup with delay\n      setTimeout(() => {\n        console.log(\"üîÑ Reinitializing terminal after cleanup...\");\n        initializeTerminal(connectionData);\n      }, 1000);\n    }\n  }, [connectionData, initializeTerminal]);\n  const handleNewSession = useCallback(() => {\n    if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\n      globalTerminalInstance.clear();\n    }\n    if (globalSocketInstance && connectionData) {\n      const newSessionData = {\n        ...connectionData,\n        sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        connectionTime: new Date().toISOString()\n      };\n      setConnectionData(newSessionData);\n      connectToSSHServer(globalSocketInstance, newSessionData, globalTerminalInstance);\n    }\n  }, [connectionData, connectToSSHServer]);\n  const handleNewTerminal = useCallback(() => {\n    handleNewSession();\n  }, [handleNewSession]);\n  const getStatusColor = () => {\n    switch (connectionStatus) {\n      case \"connected\":\n      case \"ssh-connected\":\n        return \"#2ecc71\";\n      case \"connecting\":\n      case \"reconnecting\":\n        return \"#f39c12\";\n      case \"error\":\n        return \"#e74c3c\";\n      default:\n        return \"#95a5a6\";\n    }\n  };\n  const getStatusText = () => {\n    switch (connectionStatus) {\n      case \"initializing\":\n        return \"Initializing...\";\n      case \"connecting\":\n        return \"Connecting...\";\n      case \"connected\":\n        return \"Socket Connected\";\n      case \"ssh-connected\":\n        return \"SSH Connected\";\n      case \"reconnecting\":\n        return \"Reconnecting...\";\n      case \"disconnected\":\n        return \"Disconnected\";\n      case \"error\":\n        return \"Connection Error\";\n      default:\n        return \"Unknown\";\n    }\n  };\n  const getUserDisplayInfo = () => {\n    if (!connectionData) return {\n      name: 'Unknown',\n      id: 'N/A',\n      email: 'N/A'\n    };\n    if (connectionData.userName) {\n      return {\n        name: connectionData.userName,\n        id: connectionData.registeredId || 'N/A',\n        email: connectionData.userEmail || 'N/A',\n        role: connectionData.userRole || 'student'\n      };\n    }\n    if (connectionData.user_data) {\n      return {\n        name: connectionData.user_data.name || 'Unknown',\n        id: connectionData.user_data.registered_id || 'N/A',\n        email: connectionData.user_data.email || 'N/A',\n        role: connectionData.user_data.role || 'student'\n      };\n    }\n    return {\n      name: 'Unknown',\n      id: 'N/A',\n      email: 'N/A',\n      role: 'student'\n    };\n  };\n  if (error && !connectionData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#2c3e50',\n        color: 'white',\n        fontFamily: 'Arial, sans-serif'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '40px',\n          backgroundColor: '#34495e',\n          borderRadius: '8px',\n          maxWidth: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '48px',\n            marginBottom: '20px'\n          },\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: '0 0 15px 0'\n          },\n          children: \"Terminal Connection Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0 0 20px 0',\n            color: '#bdc3c7'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0 0 20px 0',\n            fontSize: '14px',\n            color: '#95a5a6'\n          },\n          children: \"Please return to the dashboard and try connecting again.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.close(),\n          style: {\n            padding: '10px 20px',\n            backgroundColor: '#e74c3c',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '16px'\n          },\n          children: \"Close Window\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this);\n  }\n  if (!connectionData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        backgroundColor: '#2c3e50',\n        color: 'white',\n        fontFamily: 'Arial, sans-serif'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          padding: '40px',\n          backgroundColor: '#34495e',\n          borderRadius: '8px',\n          maxWidth: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '48px',\n            marginBottom: '20px'\n          },\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            margin: '0 0 15px 0'\n          },\n          children: \"Loading Terminal...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 735,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            margin: '0 0 20px 0',\n            color: '#bdc3c7'\n          },\n          children: \"Initializing connection data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleReconnect,\n            style: {\n              padding: '10px 20px',\n              backgroundColor: '#3498db',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              fontSize: '14px'\n            },\n            children: \"\\uD83D\\uDD04 Retry Connection\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 718,\n      columnNumber: 7\n    }, this);\n  }\n  const userInfo = getUserDisplayInfo();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      backgroundColor: '#2c3e50'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '12px 20px',\n        backgroundColor: '#34495e',\n        color: 'white',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        borderBottom: '2px solid #2c3e50',\n        minHeight: '60px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: '15px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              margin: 0,\n              fontSize: '18px',\n              fontWeight: 'bold'\n            },\n            children: [\"\\uD83D\\uDDA5\\uFE0F \", (connectionData === null || connectionData === void 0 ? void 0 : connectionData.serverName) || (connectionData === null || connectionData === void 0 ? void 0 : connectionData.host) || \"Terminal\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '6px',\n              padding: '4px 8px',\n              backgroundColor: getStatusColor(),\n              borderRadius: '12px',\n              fontSize: '12px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '8px',\n                height: '8px',\n                borderRadius: '50%',\n                backgroundColor: 'white'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 15\n            }, this), getStatusText()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '13px',\n            color: '#bdc3c7',\n            marginTop: '4px'\n          },\n          children: [\"\\uD83D\\uDC64 \", userInfo.name, userInfo.id !== 'N/A' && ` (ID: ${userInfo.id})`, userInfo.email !== 'N/A' && ` | üìß ${userInfo.email}`, connectionData && ` | üîó ${connectionData.username}@${connectionData.host}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '8px'\n        },\n        children: [(connectionStatus === \"error\" || connectionStatus === \"disconnected\") && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleReconnect,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: '#f39c12',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '12px'\n          },\n          children: \"\\uD83D\\uDD04 Reconnect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewTerminal,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: '#3498db',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '12px'\n          },\n          children: \"\\uD83C\\uDD95 New Session\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 823,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDisconnect,\n          style: {\n            padding: '6px 12px',\n            backgroundColor: '#e74c3c',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            fontSize: '12px'\n          },\n          children: \"\\u274C Disconnect & Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), connectionData && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '8px 20px',\n        backgroundColor: '#2c3e50',\n        color: '#ecf0f1',\n        fontSize: '12px',\n        borderBottom: '1px solid #34495e'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\uD83C\\uDF10 Server: \", connectionData.host, \" | \\uD83D\\uDC65 Role: \", userInfo.role, \" | \\uD83D\\uDD11 Session: \", ((_connectionData$sessi = connectionData.sessionId) === null || _connectionData$sessi === void 0 ? void 0 : _connectionData$sessi.substr(-8)) || 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 865,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: connectionData.connectionTime && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Connected: \", new Date(connectionData.connectionTime).toLocaleTimeString()]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 857,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '4px 20px',\n        backgroundColor: '#1a252f',\n        color: '#95a5a6',\n        fontSize: '11px',\n        borderBottom: '1px solid #34495e'\n      },\n      children: [\"\\uD83D\\uDD0D Debug: Socket URL: \", SERVER_URL, \" | Status: \", connectionStatus, \" | Connected: \", isConnected ? 'Yes' : 'No', \" | GLOBAL Instance: \", globalIsInitialized ? 'ACTIVE' : 'NONE', \" | Initialize Count: 1 | Duplication: BLOCKED |\", error && ` Error: ${error}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: terminalRef,\n      style: {\n        flex: 1,\n        padding: '10px',\n        backgroundColor: '#000000',\n        overflow: 'hidden',\n        border: '1px solid #34495e',\n        margin: '5px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 894,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '8px 20px',\n        backgroundColor: '#34495e',\n        color: '#bdc3c7',\n        fontSize: '11px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: error ? /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#e74c3c'\n          },\n          children: [\"\\u274C Error: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Terminal ready | Use Ctrl+C to interrupt | Type 'exit' to close SSH session | No Local Echo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: userInfo.name !== 'Unknown' && `Logged in as: ${userInfo.name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 907,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 761,\n    columnNumber: 5\n  }, this);\n};\n_s(TerminalPage, \"ZnoowtNlrlN6uhGRwOIjQSUaLtg=\");\n_c = TerminalPage;\nexport default TerminalPage;\nvar _c;\n$RefreshReg$(_c, \"TerminalPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","io","Terminal","FitAddon","jsxDEV","_jsxDEV","Fragment","_Fragment","SERVER_URL","globalTerminalInstance","globalSocketInstance","globalIsInitialized","globalFitAddon","globalInputHandler","globalKeyHandler","TerminalPage","_s","_connectionData$sessi","isConnected","setIsConnected","connectionData","setConnectionData","error","setError","connectionStatus","setConnectionStatus","terminalRef","terminalInstance","socketRef","fitAddonRef","isInitializedRef","inputHandlerRef","keyHandlerRef","getStoredUserData","userData","localStorage","getItem","token","user","JSON","parse","userId","id","userEmail","email","userName","name","registeredId","registered_id","userRole","role","err","console","warn","connectToSSHServer","socketInstance","data","term","write","log","sshConnectionData","host","username","password","port","session","sessionId","connectionTime","serverName","dashboardUrl","browser","userAgent","browserInfo","navigator","windowId","window","referrer","document","emit","type","action","target","timestamp","Date","toISOString","timeoutId","setTimeout","cleanupConnection","dispose","removeAllListeners","disconnect","isDisposed","Object","keys","sessionStorage","forEach","key","startsWith","removeItem","initializeTerminal","current","_globalSocketInstance","_globalSocketInstance2","connected","cursorBlink","theme","background","foreground","cursor","selection","black","red","green","yellow","blue","magenta","cyan","white","fontSize","fontFamily","rows","cols","scrollback","convertEol","disableStdin","localEcho","loadAddon","open","fit","newSocket","query","timeout","forceNew","reconnection","reconnectionAttempts","reconnectionDelay","sshConnectedHandled","on","outputData","info","toLocaleString","repeat","errorData","errorMsg","message","reason","connect","onData","input","onKey","domEvent","ctrlKey","handleResize","element","fitError","Math","floor","clientWidth","clientHeight","resize","addEventListener","removeEventListener","initializeConnection","urlParams","URLSearchParams","location","search","sessionKey","get","sessionData","urlData","decodeURIComponent","stored","cleanup","_globalSocketInstance3","_globalSocketInstance4","handleMessage","event","handleDisconnect","disconnectTime","disconnectReason","close","handleReconnect","clear","handleNewSession","newSessionData","now","random","toString","substr","handleNewTerminal","getStatusColor","getStatusText","getUserDisplayInfo","user_data","style","height","display","alignItems","justifyContent","backgroundColor","color","children","textAlign","padding","borderRadius","maxWidth","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","margin","onClick","border","marginTop","userInfo","flexDirection","borderBottom","minHeight","flex","gap","fontWeight","width","toLocaleTimeString","ref","overflow","_c","$RefreshReg$"],"sources":["C:/Users/Kavindu/Desktop/ssh-project-slt/frontend/src/pages/TerminalPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { io } from \"socket.io-client\";\r\nimport { Terminal } from \"xterm\";\r\nimport \"xterm/css/xterm.css\";\r\nimport { FitAddon } from 'xterm-addon-fit';\r\n\r\nconst SERVER_URL = \"http://localhost:5000\";\r\n\r\n// GLOBAL SINGLETON PATTERN - Prevent multiple instances\r\nlet globalTerminalInstance = null;\r\nlet globalSocketInstance = null;\r\nlet globalIsInitialized = false;\r\nlet globalFitAddon = null;\r\nlet globalInputHandler = null;\r\nlet globalKeyHandler = null;\r\n\r\nconst TerminalPage = () => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [connectionData, setConnectionData] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [connectionStatus, setConnectionStatus] = useState(\"initializing\");\r\n  \r\n  // Refs that don't cause re-renders\r\n  const terminalRef = useRef();\r\n  const terminalInstance = useRef();\r\n  const socketRef = useRef();\r\n  const fitAddonRef = useRef(); \r\n  const isInitializedRef = useRef(false);\r\n  const inputHandlerRef = useRef(null); // Track input handler to prevent duplicates\r\n  const keyHandlerRef = useRef(null); // Track key handler to prevent duplicates\r\n\r\n  const getStoredUserData = useCallback(() => {\r\n    try {\r\n      const userData = localStorage.getItem('user');\r\n      const token = localStorage.getItem('token');\r\n      \r\n      if (userData) {\r\n        const user = JSON.parse(userData);\r\n        return {\r\n          token: token || '',\r\n          userId: user.id || '',\r\n          userEmail: user.email || '',\r\n          userName: user.name || '',\r\n          registeredId: user.registered_id || '',\r\n          userRole: user.role || 'student'\r\n        };\r\n      }\r\n    } catch (err) {\r\n      console.warn(\"Could not retrieve stored user data:\", err);\r\n    }\r\n    return {};\r\n  }, []);\r\n\r\n  const connectToSSHServer = useCallback((socketInstance, data, term) => {\r\n    if (!socketInstance || !data) {\r\n      console.error(\"Missing socket instance or connection data\");\r\n      term.write(`‚ùå Cannot connect: Missing connection data\\r\\n`);\r\n      return;\r\n    }\r\n\r\n    console.log(\"üîó Attempting SSH connection with data:\", data);\r\n\r\n    const sshConnectionData = {\r\n      host: data.host,\r\n      username: data.username,\r\n      password: data.password,\r\n      port: data.port || 22,\r\n      \r\n      user: {\r\n        id: data.userId,\r\n        name: data.userName,\r\n        email: data.userEmail,\r\n        registered_id: data.registeredId,\r\n        role: data.userRole\r\n      },\r\n      \r\n      session: {\r\n        id: data.sessionId,\r\n        token: data.token,\r\n        connectionTime: data.connectionTime,\r\n        serverName: data.serverName,\r\n        dashboardUrl: data.dashboardUrl\r\n      },\r\n      \r\n      browser: {\r\n        userAgent: data.browserInfo || navigator.userAgent,\r\n        windowId: window.name,\r\n        referrer: document.referrer\r\n      }\r\n    };\r\n\r\n    term.write(`üîó Connecting to SSH server...\\r\\n`);\r\n    term.write(`üì° Host: ${data.host}:${data.port || 22}\\r\\n`);\r\n    term.write(`üë§ User: ${data.username}\\r\\n`);\r\n    term.write(`üîê Authenticating...\\r\\n\\r\\n`);\r\n\r\n    console.log(\"üì§ Sending SSH connection data:\", sshConnectionData);\r\n\r\n    // Send connection requests - but only once per connection\r\n    socketInstance.emit(\"ssh-connect\", sshConnectionData);\r\n    socketInstance.emit(\"ssh-connect-enhanced\", sshConnectionData);\r\n    socketInstance.emit(\"connect-ssh\", sshConnectionData);\r\n    \r\n    socketInstance.emit(\"user-activity\", {\r\n      type: 'terminal_access',\r\n      userId: data.userId,\r\n      userName: data.userName,\r\n      action: 'ssh_connect_attempt',\r\n      target: data.host,\r\n      timestamp: new Date().toISOString(),\r\n      sessionId: data.sessionId\r\n    });\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      term.write(`‚è±Ô∏è Connection is taking longer than expected...\\r\\n`);\r\n      term.write(`üí° Check if your backend server is handling SSH connections properly\\r\\n\\r\\n`);\r\n    }, 10000);\r\n\r\n    return timeoutId;\r\n  }, []); // NO DEPENDENCIES to prevent recreation\r\n\r\n  const cleanupConnection = useCallback(() => {\r\n    console.log(\"üßπ GLOBAL CLEANUP: Cleaning up connection...\");\r\n    \r\n    // Clean up global input handlers\r\n    if (globalInputHandler) {\r\n      console.log(\"üóëÔ∏è Disposing GLOBAL input handler...\");\r\n      globalInputHandler.dispose();\r\n      globalInputHandler = null;\r\n    }\r\n    if (globalKeyHandler) {\r\n      console.log(\"üóëÔ∏è Disposing GLOBAL key handler...\");\r\n      globalKeyHandler.dispose();\r\n      globalKeyHandler = null;\r\n    }\r\n    \r\n    // Clean up global socket\r\n    if (globalSocketInstance) {\r\n      console.log(\"üóëÔ∏è Cleaning up GLOBAL socket...\");\r\n      globalSocketInstance.removeAllListeners();\r\n      globalSocketInstance.disconnect();\r\n      globalSocketInstance = null;\r\n    }\r\n    \r\n    // Clean up global terminal\r\n    if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\r\n      console.log(\"üóëÔ∏è Disposing GLOBAL terminal...\");\r\n      globalTerminalInstance.dispose();\r\n      globalTerminalInstance = null;\r\n    }\r\n    \r\n    // Reset global flags\r\n    globalIsInitialized = false;\r\n    globalFitAddon = null;\r\n    \r\n    // Clean up session storage\r\n    Object.keys(sessionStorage).forEach(key => {\r\n      if (key.startsWith('terminal_')) {\r\n        sessionStorage.removeItem(key);\r\n      }\r\n    });\r\n    \r\n    console.log(\"‚úÖ GLOBAL cleanup complete\");\r\n  }, []);\r\n\r\n  const initializeTerminal = useCallback((data) => {\r\n    // GLOBAL SINGLETON CHECK - Prevent multiple instances across ALL React renders\r\n    if (globalIsInitialized) {\r\n      console.log(\"üõë GLOBAL BLOCK: Terminal already exists globally, using existing instance\");\r\n      \r\n      // If we have existing global instances, just update refs and state\r\n      if (globalTerminalInstance && terminalRef.current && !globalTerminalInstance.isDisposed) {\r\n        terminalInstance.current = globalTerminalInstance;\r\n        socketRef.current = globalSocketInstance;\r\n        setIsConnected(!!globalSocketInstance?.connected);\r\n        setConnectionStatus(globalSocketInstance?.connected ? \"ssh-connected\" : \"connected\");\r\n      }\r\n      return;\r\n    }\r\n    \r\n    console.log(\"üöÄ GLOBAL INIT: Creating SINGLE terminal instance globally\");\r\n    globalIsInitialized = true; // Set GLOBAL flag immediately\r\n    isInitializedRef.current = true; // Set local flag too\r\n    setConnectionStatus(\"connecting\");\r\n    \r\n    // Create GLOBAL fitAddon only once\r\n    if (!globalFitAddon) {\r\n      globalFitAddon = new FitAddon();\r\n    }\r\n    \r\n    // Initialize Terminal with DISABLED local echo\r\n    const term = new Terminal({\r\n      cursorBlink: true,\r\n      theme: {\r\n        background: '#000000',\r\n        foreground: '#ffffff',\r\n        cursor: '#ffffff',\r\n        selection: '#ffffff40',\r\n        black: '#000000',\r\n        red: '#e74c3c',\r\n        green: '#2ecc71',\r\n        yellow: '#f1c40f',\r\n        blue: '#3498db',\r\n        magenta: '#9b59b6',\r\n        cyan: '#1abc9c',\r\n        white: '#ecf0f1'\r\n      },\r\n      fontSize: 14,\r\n      fontFamily: 'Consolas, Monaco, \"Courier New\", monospace',\r\n      rows: 30,\r\n      cols: 120,\r\n      scrollback: 1000,\r\n      convertEol: true,\r\n      disableStdin: false,\r\n      localEcho: false // No local echo\r\n    });\r\n\r\n    term.loadAddon(globalFitAddon);\r\n\r\n    if (terminalRef.current) {\r\n      term.open(terminalRef.current);\r\n      globalFitAddon.fit();\r\n      \r\n      // Set GLOBAL references\r\n      globalTerminalInstance = term;\r\n      terminalInstance.current = term;\r\n      \r\n      term.write('üöÄ GLOBAL TERMINAL: Initializing (ONCE)...\\r\\n');\r\n      term.write(`üì° Connecting to ${SERVER_URL}...\\r\\n\\r\\n`);\r\n    }\r\n    \r\n    // Clean up existing GLOBAL socket before creating new one\r\n    if (globalSocketInstance) {\r\n      globalSocketInstance.removeAllListeners();\r\n      globalSocketInstance.disconnect();\r\n    }\r\n    \r\n    // Initialize Socket.IO as GLOBAL instance\r\n    const newSocket = io(SERVER_URL, {\r\n      query: {\r\n        userId: data.userId || '',\r\n        userName: data.userName || '',\r\n        userRole: data.userRole || 'student'\r\n      },\r\n      timeout: 10000,\r\n      forceNew: true,\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000\r\n    });\r\n    \r\n    // Set GLOBAL socket reference\r\n    globalSocketInstance = newSocket;\r\n    socketRef.current = newSocket;\r\n\r\n    // Socket event listeners - ADD ONCE FLAG to prevent duplicate events\r\n    let sshConnectedHandled = false;\r\n\r\n    newSocket.on(\"connect\", () => {\r\n      console.log(\"‚úÖ GLOBAL SOCKET: Connected to terminal server\");\r\n      setIsConnected(true);\r\n      setConnectionStatus(\"connected\");\r\n      term.write(`‚úÖ Socket connected to ${SERVER_URL}\\r\\n`);\r\n      term.write(`üîó Establishing SSH connection...\\r\\n\\r\\n`);\r\n      \r\n      connectToSSHServer(newSocket, data, term);\r\n    });\r\n\r\n    newSocket.on(\"ssh-output\", (outputData) => {\r\n      if (term && !term.isDisposed) {\r\n        term.write(outputData);\r\n      }\r\n    });\r\n\r\n    newSocket.on(\"ssh-connected\", (info) => {\r\n      // PREVENT DUPLICATE SSH CONNECTED MESSAGES\r\n      if (sshConnectedHandled) {\r\n        console.log(\"‚ö†Ô∏è SSH connected event already handled globally, ignoring duplicate\");\r\n        return;\r\n      }\r\n      sshConnectedHandled = true;\r\n      \r\n      console.log(\"üéâ GLOBAL SSH: Connection established (ONCE ONLY)\");\r\n      setConnectionStatus(\"ssh-connected\");\r\n      setError(\"\");\r\n      term.write(`\\r\\nüéâ SSH CONNECTION ESTABLISHED! üéâ\\r\\n`);\r\n      term.write(`‚úÖ Connected to: ${info.host || data.host}\\r\\n`);\r\n      term.write(`üë§ User: ${data.userName || 'Unknown'}\\r\\n`);\r\n      term.write(`üÜî ID: ${data.registeredId || 'No ID'}\\r\\n`);\r\n      term.write(`‚è∞ Time: ${new Date().toLocaleString()}\\r\\n`);\r\n      term.write(`${'='.repeat(50)}\\r\\n`);\r\n      term.write(`üí° You can now run commands like: pwd, ls, whoami\\r\\n`);\r\n      term.write(`${'='.repeat(50)}\\r\\n\\r\\n`);\r\n    });\r\n\r\n    newSocket.on(\"ssh-error\", (errorData) => {\r\n      const errorMsg = errorData.message || errorData;\r\n      term.write(`\\r\\n‚ùå SSH Connection Error: ${errorMsg}\\r\\n`);\r\n      term.write(`\\r\\nüîÑ Retrying connection in 3 seconds...\\r\\n`);\r\n      setConnectionStatus(\"error\");\r\n      setError(errorMsg);\r\n      \r\n      setTimeout(() => {\r\n        if (globalSocketInstance && data) {\r\n          connectToSSHServer(globalSocketInstance, data, term);\r\n        }\r\n      }, 3000);\r\n    });\r\n\r\n    newSocket.on(\"ssh-disconnected\", () => {\r\n      term.write(\"\\r\\nüîå SSH connection closed\\r\\n\");\r\n      setConnectionStatus(\"disconnected\");\r\n      setIsConnected(false);\r\n    });\r\n\r\n    newSocket.on(\"disconnect\", (reason) => {\r\n      setIsConnected(false);\r\n      setConnectionStatus(\"disconnected\");\r\n      term.write(`\\r\\n[Socket disconnected: ${reason}]\\r\\n`);\r\n      \r\n      if (reason !== 'io client disconnect') {\r\n        setTimeout(() => {\r\n          if (globalSocketInstance && !globalSocketInstance.connected) {\r\n            term.write(`\\r\\nüîÑ Attempting to reconnect...\\r\\n`);\r\n            globalSocketInstance.connect();\r\n          }\r\n        }, 2000);\r\n      }\r\n    });\r\n\r\n    newSocket.on(\"connect_error\", (err) => {\r\n      const errorMsg = `Connection error: ${err.message}`;\r\n      setError(errorMsg);\r\n      setConnectionStatus(\"error\");\r\n      term.write(`\\r\\n‚ùå ${errorMsg}\\r\\n`);\r\n      term.write(`\\r\\nüí° Make sure your backend server is running on ${SERVER_URL}\\r\\n`);\r\n    });\r\n\r\n    // CRITICAL FIX: Dispose any existing GLOBAL handlers first\r\n    if (globalInputHandler) {\r\n      globalInputHandler.dispose();\r\n      globalInputHandler = null;\r\n      console.log(\"üóëÔ∏è Disposed existing GLOBAL input handler\");\r\n    }\r\n    if (globalKeyHandler) {\r\n      globalKeyHandler.dispose();\r\n      globalKeyHandler = null;\r\n      console.log(\"üóëÔ∏è Disposed existing GLOBAL key handler\");\r\n    }\r\n\r\n    // GLOBAL INPUT HANDLER - Attach only once globally\r\n    globalInputHandler = term.onData((input) => {\r\n      console.log(\"üéØ GLOBAL INPUT (single handler):\", input);\r\n      if (newSocket && newSocket.connected) {\r\n        // Send raw input without any local echo\r\n        newSocket.emit(\"ssh-input\", input);\r\n        console.log(\"üì§ GLOBAL SEND (single emit):\", input);\r\n      } else {\r\n        term.write(`\\r\\n‚ùå Not connected to server. Cannot send input.\\r\\n`);\r\n      }\r\n    });\r\n\r\n    // GLOBAL KEY HANDLER - Only for special keys like Ctrl+C\r\n    globalKeyHandler = term.onKey(({ key, domEvent }) => {\r\n      // Only handle Ctrl+C specifically, nothing else\r\n      if (domEvent.ctrlKey && domEvent.key === 'c') {\r\n        if (newSocket && newSocket.connected) {\r\n          newSocket.emit(\"ssh-input\", '\\x03'); // Send interrupt signal\r\n          console.log(\"üì§ GLOBAL CTRL+C sent\");\r\n        }\r\n      }\r\n      // DON'T handle any other keys to prevent duplication\r\n    });\r\n\r\n    // Handle window resize - using GLOBAL ref to prevent recreation\r\n    const handleResize = () => {\r\n      if (term && term.element && globalFitAddon && !term.isDisposed) {\r\n        try {\r\n          globalFitAddon.fit();\r\n        } catch (fitError) {\r\n          console.warn(\"Fit error:\", fitError);\r\n          // Fallback resize logic\r\n          if (terminalRef.current) {\r\n            const cols = Math.floor(terminalRef.current.clientWidth / 9);\r\n            const rows = Math.floor(terminalRef.current.clientHeight / 17);\r\n            term.resize(cols, rows);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // Return cleanup function\r\n    return () => {\r\n      console.log(\"üßπ Local cleanup function called...\");\r\n      window.removeEventListener('resize', handleResize);\r\n      \r\n      // Don't clean up global instances here - only in cleanupConnection\r\n      // Just remove local references\r\n      terminalInstance.current = null;\r\n      socketRef.current = null;\r\n    };\r\n  }, [connectToSSHServer]);\r\n\r\n  const initializeConnection = useCallback(() => {\r\n    // Prevent multiple initializations\r\n    if (isInitializedRef.current) {\r\n      console.log(\"Connection already initialized, skipping...\");\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const urlParams = new URLSearchParams(window.location.search);\r\n      let data = null;\r\n\r\n      // Check for sessionKey method first\r\n      const sessionKey = urlParams.get('sessionKey');\r\n      if (sessionKey) {\r\n        const sessionData = sessionStorage.getItem(sessionKey);\r\n        if (sessionData) {\r\n          data = JSON.parse(sessionData);\r\n          sessionStorage.removeItem(sessionKey);\r\n        }\r\n      }\r\n\r\n      // Fallback to direct URL data\r\n      if (!data) {\r\n        const urlData = urlParams.get('data') || urlParams.get('fallbackData');\r\n        if (urlData) {\r\n          data = JSON.parse(decodeURIComponent(urlData));\r\n        }\r\n      }\r\n\r\n      // Old format compatibility\r\n      if (!data) {\r\n        const host = urlParams.get('host');\r\n        const username = urlParams.get('username');\r\n        const password = urlParams.get('password');\r\n        const serverName = urlParams.get('serverName');\r\n        const token = urlParams.get('token');\r\n        const userId = urlParams.get('userId');\r\n\r\n        if (host && username && password) {\r\n          data = {\r\n            host,\r\n            username,\r\n            password,\r\n            serverName,\r\n            token,\r\n            userId,\r\n            ...getStoredUserData()\r\n          };\r\n        }\r\n      }\r\n\r\n      // SessionStorage fallback\r\n      if (!data) {\r\n        const stored = sessionStorage.getItem('terminalConnection');\r\n        if (stored) {\r\n          data = JSON.parse(stored);\r\n        }\r\n      }\r\n\r\n      if (data) {\r\n        console.log(\"Setting connection data:\", data);\r\n        setConnectionData(data);\r\n      } else {\r\n        setError(\"No connection data provided. Please return to the dashboard and try again.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error initializing connection:\", err);\r\n      setError(\"Failed to initialize connection data\");\r\n    }\r\n  }, [getStoredUserData]);\r\n\r\n  // Separate useEffect for initial connection data loading - NO DEPENDENCIES\r\n  useEffect(() => {\r\n    if (!isInitializedRef.current) {\r\n      console.log(\"üîÑ Loading initial connection data (ONCE)...\");\r\n      initializeConnection();\r\n    }\r\n  }, []); // COMPLETELY EMPTY - run only once on mount\r\n\r\n  // Separate useEffect for terminal initialization - NO DEPENDENCIES  \r\n  useEffect(() => {\r\n    if (connectionData && !globalIsInitialized) {\r\n      console.log(\"üöÄ GLOBAL CHECK: Initializing terminal with connection data (ONCE)...\");\r\n      const cleanup = initializeTerminal(connectionData);\r\n      \r\n      return cleanup;\r\n    } else if (connectionData && globalIsInitialized) {\r\n      console.log(\"üîÑ GLOBAL EXISTS: Connecting to existing terminal instance\");\r\n      // Connect to existing global terminal\r\n      if (globalTerminalInstance && terminalRef.current && !globalTerminalInstance.isDisposed) {\r\n        globalTerminalInstance.open(terminalRef.current);\r\n        terminalInstance.current = globalTerminalInstance;\r\n        socketRef.current = globalSocketInstance;\r\n        setIsConnected(!!globalSocketInstance?.connected);\r\n        setConnectionStatus(globalSocketInstance?.connected ? \"ssh-connected\" : \"connected\");\r\n      }\r\n    }\r\n  }, [connectionData]); // ONLY connectionData dependency\r\n\r\n  // Handle postMessage communication\r\n  useEffect(() => {\r\n    const handleMessage = (event) => {\r\n      if (event.data && event.data.type === 'TERMINAL_CONNECTION_DATA') {\r\n        if (!isInitializedRef.current) {\r\n          setConnectionData(event.data.data);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('message', handleMessage);\r\n    \r\n    return () => {\r\n      window.removeEventListener('message', handleMessage);\r\n    };\r\n  }, []);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(\"Component unmounting, cleaning up...\");\r\n      cleanupConnection();\r\n    };\r\n  }, [cleanupConnection]);\r\n\r\n  const handleDisconnect = useCallback(() => {\r\n    if (globalSocketInstance) {\r\n      globalSocketInstance.emit(\"user-disconnect\", {\r\n        userId: connectionData?.userId,\r\n        userName: connectionData?.userName,\r\n        sessionId: connectionData?.sessionId,\r\n        disconnectTime: new Date().toISOString(),\r\n        disconnectReason: 'user_initiated'\r\n      });\r\n      \r\n      globalSocketInstance.disconnect();\r\n    }\r\n    \r\n    cleanupConnection();\r\n    window.close();\r\n  }, [connectionData, cleanupConnection]);\r\n\r\n  const handleReconnect = useCallback(() => {\r\n    if (connectionData) {\r\n      console.log(\"üîÑ Starting reconnection process...\");\r\n      setError(\"\");\r\n      setConnectionStatus(\"reconnecting\");\r\n      \r\n      // CRITICAL: Clean up ALL global handlers first\r\n      if (globalInputHandler) {\r\n        globalInputHandler.dispose();\r\n        globalInputHandler = null;\r\n        console.log(\"‚úÖ Input handler disposed for reconnect\");\r\n      }\r\n      if (globalKeyHandler) {\r\n        globalKeyHandler.dispose();\r\n        globalKeyHandler = null;\r\n        console.log(\"‚úÖ Key handler disposed for reconnect\");\r\n      }\r\n      \r\n      // Reset initialization flags BEFORE cleanup\r\n      globalIsInitialized = false;\r\n      isInitializedRef.current = false;\r\n      \r\n      if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\r\n        globalTerminalInstance.clear();\r\n        globalTerminalInstance.write(\"üîÑ Reconnecting...\\r\\n\");\r\n      }\r\n      \r\n      // Clean up existing connection\r\n      if (globalSocketInstance) {\r\n        globalSocketInstance.removeAllListeners();\r\n        globalSocketInstance.disconnect();\r\n        globalSocketInstance = null;\r\n      }\r\n      \r\n      if (globalTerminalInstance) {\r\n        globalTerminalInstance.dispose();\r\n        globalTerminalInstance = null;\r\n      }\r\n      \r\n      // Reinitialize after cleanup with delay\r\n      setTimeout(() => {\r\n        console.log(\"üîÑ Reinitializing terminal after cleanup...\");\r\n        initializeTerminal(connectionData);\r\n      }, 1000);\r\n    }\r\n  }, [connectionData, initializeTerminal]);\r\n\r\n  const handleNewSession = useCallback(() => {\r\n    if (globalTerminalInstance && !globalTerminalInstance.isDisposed) {\r\n      globalTerminalInstance.clear();\r\n    }\r\n    if (globalSocketInstance && connectionData) {\r\n      const newSessionData = {\r\n        ...connectionData,\r\n        sessionId: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        connectionTime: new Date().toISOString()\r\n      };\r\n      setConnectionData(newSessionData);\r\n      connectToSSHServer(globalSocketInstance, newSessionData, globalTerminalInstance);\r\n    }\r\n  }, [connectionData, connectToSSHServer]);\r\n\r\n  const handleNewTerminal = useCallback(() => {\r\n    handleNewSession();\r\n  }, [handleNewSession]);\r\n\r\n  const getStatusColor = () => {\r\n    switch (connectionStatus) {\r\n      case \"connected\":\r\n      case \"ssh-connected\":\r\n        return \"#2ecc71\";\r\n      case \"connecting\":\r\n      case \"reconnecting\":\r\n        return \"#f39c12\";\r\n      case \"error\":\r\n        return \"#e74c3c\";\r\n      default:\r\n        return \"#95a5a6\";\r\n    }\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    switch (connectionStatus) {\r\n      case \"initializing\":\r\n        return \"Initializing...\";\r\n      case \"connecting\":\r\n        return \"Connecting...\";\r\n      case \"connected\":\r\n        return \"Socket Connected\";\r\n      case \"ssh-connected\":\r\n        return \"SSH Connected\";\r\n      case \"reconnecting\":\r\n        return \"Reconnecting...\";\r\n      case \"disconnected\":\r\n        return \"Disconnected\";\r\n      case \"error\":\r\n        return \"Connection Error\";\r\n      default:\r\n        return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  const getUserDisplayInfo = () => {\r\n    if (!connectionData) return { name: 'Unknown', id: 'N/A', email: 'N/A' };\r\n    \r\n    if (connectionData.userName) {\r\n      return {\r\n        name: connectionData.userName,\r\n        id: connectionData.registeredId || 'N/A',\r\n        email: connectionData.userEmail || 'N/A',\r\n        role: connectionData.userRole || 'student'\r\n      };\r\n    }\r\n    \r\n    if (connectionData.user_data) {\r\n      return {\r\n        name: connectionData.user_data.name || 'Unknown',\r\n        id: connectionData.user_data.registered_id || 'N/A',\r\n        email: connectionData.user_data.email || 'N/A',\r\n        role: connectionData.user_data.role || 'student'\r\n      };\r\n    }\r\n    \r\n    return { name: 'Unknown', id: 'N/A', email: 'N/A', role: 'student' };\r\n  };\r\n\r\n  if (error && !connectionData) {\r\n    return (\r\n      <div style={{ \r\n        height: '100vh', \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        justifyContent: 'center',\r\n        backgroundColor: '#2c3e50',\r\n        color: 'white',\r\n        fontFamily: 'Arial, sans-serif'\r\n      }}>\r\n        <div style={{ \r\n          textAlign: 'center', \r\n          padding: '40px',\r\n          backgroundColor: '#34495e',\r\n          borderRadius: '8px',\r\n          maxWidth: '500px'\r\n        }}>\r\n          <div style={{ fontSize: '48px', marginBottom: '20px' }}>‚ö†Ô∏è</div>\r\n          <h2 style={{ margin: '0 0 15px 0' }}>Terminal Connection Error</h2>\r\n          <p style={{ margin: '0 0 20px 0', color: '#bdc3c7' }}>{error}</p>\r\n          <p style={{ margin: '0 0 20px 0', fontSize: '14px', color: '#95a5a6' }}>\r\n            Please return to the dashboard and try connecting again.\r\n          </p>\r\n          <button \r\n            onClick={() => window.close()}\r\n            style={{\r\n              padding: '10px 20px',\r\n              backgroundColor: '#e74c3c',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n              fontSize: '16px'\r\n            }}\r\n          >\r\n            Close Window\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!connectionData) {\r\n    return (\r\n      <div style={{ \r\n        height: '100vh', \r\n        display: 'flex', \r\n        alignItems: 'center', \r\n        justifyContent: 'center',\r\n        backgroundColor: '#2c3e50',\r\n        color: 'white',\r\n        fontFamily: 'Arial, sans-serif'\r\n      }}>\r\n        <div style={{ \r\n          textAlign: 'center', \r\n          padding: '40px',\r\n          backgroundColor: '#34495e',\r\n          borderRadius: '8px',\r\n          maxWidth: '500px'\r\n        }}>\r\n          <div style={{ fontSize: '48px', marginBottom: '20px' }}>üîÑ</div>\r\n          <h2 style={{ margin: '0 0 15px 0' }}>Loading Terminal...</h2>\r\n          <p style={{ margin: '0 0 20px 0', color: '#bdc3c7' }}>Initializing connection data...</p>\r\n          <div style={{ marginTop: '20px' }}>\r\n            <button \r\n              onClick={handleReconnect}\r\n              style={{\r\n                padding: '10px 20px',\r\n                backgroundColor: '#3498db',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer',\r\n                fontSize: '14px'\r\n              }}\r\n            >\r\n              üîÑ Retry Connection\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const userInfo = getUserDisplayInfo();\r\n\r\n  return (\r\n    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column', backgroundColor: '#2c3e50' }}>\r\n      {/* Enhanced Header with User Info */}\r\n      <div style={{ \r\n        padding: '12px 20px', \r\n        backgroundColor: '#34495e', \r\n        color: 'white',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        borderBottom: '2px solid #2c3e50',\r\n        minHeight: '60px'\r\n      }}>\r\n        <div style={{ flex: 1 }}>\r\n          <div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}>\r\n            <h3 style={{ margin: 0, fontSize: '18px', fontWeight: 'bold' }}>\r\n              üñ•Ô∏è {connectionData?.serverName || connectionData?.host || \"Terminal\"}\r\n            </h3>\r\n            <div style={{ \r\n              display: 'flex', \r\n              alignItems: 'center', \r\n              gap: '6px',\r\n              padding: '4px 8px',\r\n              backgroundColor: getStatusColor(),\r\n              borderRadius: '12px',\r\n              fontSize: '12px'\r\n            }}>\r\n              <div style={{ \r\n                width: '8px', \r\n                height: '8px', \r\n                borderRadius: '50%', \r\n                backgroundColor: 'white' \r\n              }}></div>\r\n              {getStatusText()}\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{ fontSize: '13px', color: '#bdc3c7', marginTop: '4px' }}>\r\n            üë§ {userInfo.name} \r\n            {userInfo.id !== 'N/A' && ` (ID: ${userInfo.id})`}\r\n            {userInfo.email !== 'N/A' && ` | üìß ${userInfo.email}`}\r\n            {connectionData && ` | üîó ${connectionData.username}@${connectionData.host}`}\r\n          </div>\r\n        </div>\r\n\r\n        <div style={{ display: 'flex', gap: '8px' }}>\r\n          {(connectionStatus === \"error\" || connectionStatus === \"disconnected\") && (\r\n            <button \r\n              onClick={handleReconnect}\r\n              style={{\r\n                padding: '6px 12px',\r\n                backgroundColor: '#f39c12',\r\n                color: 'white',\r\n                border: 'none',\r\n                borderRadius: '4px',\r\n                cursor: 'pointer',\r\n                fontSize: '12px'\r\n              }}\r\n            >\r\n              üîÑ Reconnect\r\n            </button>\r\n          )}\r\n          \r\n          <button \r\n            onClick={handleNewTerminal}\r\n            style={{\r\n              padding: '6px 12px',\r\n              backgroundColor: '#3498db',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            üÜï New Session\r\n          </button>\r\n          \r\n          <button \r\n            onClick={handleDisconnect}\r\n            style={{\r\n              padding: '6px 12px',\r\n              backgroundColor: '#e74c3c',\r\n              color: 'white',\r\n              border: 'none',\r\n              borderRadius: '4px',\r\n              cursor: 'pointer',\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            ‚ùå Disconnect & Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Connection Info Bar */}\r\n      {connectionData && (\r\n        <div style={{ \r\n          padding: '8px 20px', \r\n          backgroundColor: '#2c3e50', \r\n          color: '#ecf0f1',\r\n          fontSize: '12px',\r\n          borderBottom: '1px solid #34495e'\r\n        }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n            <div>\r\n              üåê Server: {connectionData.host} | \r\n              üë• Role: {userInfo.role} | \r\n              üîë Session: {connectionData.sessionId?.substr(-8) || 'N/A'}\r\n            </div>\r\n            <div>\r\n              {connectionData.connectionTime && (\r\n                <>Connected: {new Date(connectionData.connectionTime).toLocaleTimeString()}</>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Debug Info Bar */}\r\n      <div style={{ \r\n        padding: '4px 20px', \r\n        backgroundColor: '#1a252f', \r\n        color: '#95a5a6',\r\n        fontSize: '11px',\r\n        borderBottom: '1px solid #34495e'\r\n      }}>\r\n        üîç Debug: Socket URL: {SERVER_URL} | Status: {connectionStatus} | \r\n        Connected: {isConnected ? 'Yes' : 'No'} | \r\n        GLOBAL Instance: {globalIsInitialized ? 'ACTIVE' : 'NONE'} | Initialize Count: 1 | Duplication: BLOCKED |\r\n        {error && ` Error: ${error}`}\r\n      </div>\r\n\r\n      {/* Terminal Container */}\r\n      <div \r\n        ref={terminalRef} \r\n        style={{ \r\n          flex: 1, \r\n          padding: '10px',\r\n          backgroundColor: '#000000',\r\n          overflow: 'hidden',\r\n          border: '1px solid #34495e',\r\n          margin: '5px'\r\n        }} \r\n      />\r\n\r\n      {/* Status Footer */}\r\n      <div style={{ \r\n        padding: '8px 20px', \r\n        backgroundColor: '#34495e', \r\n        color: '#bdc3c7',\r\n        fontSize: '11px',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center'\r\n      }}>\r\n        <div>\r\n          {error ? (\r\n            <span style={{ color: '#e74c3c' }}>‚ùå Error: {error}</span>\r\n          ) : (\r\n            <span>\r\n              Terminal ready | Use Ctrl+C to interrupt | Type 'exit' to close SSH session | No Local Echo\r\n            </span>\r\n          )}\r\n        </div>\r\n        <div>\r\n          {userInfo.name !== 'Unknown' && `Logged in as: ${userInfo.name}`}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TerminalPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}