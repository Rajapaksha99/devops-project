{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kavindu\\\\Desktop\\\\ssh-project-slt\\\\frontend\\\\src\\\\pages\\\\SSHTerminal.jsx\",\n  _s = $RefreshSig$();\n// src/pages/SSHTerminal.jsx\nimport React, { useEffect, useRef } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Terminal } from \"xterm\";\nimport \"xterm/css/xterm.css\";\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = \"http://localhost:5000\";\nconst SSHTerminal = () => {\n  _s();\n  const terminalRef = useRef();\n  const [searchParams] = useSearchParams();\n  const host = searchParams.get(\"host\");\n  const username = searchParams.get(\"username\");\n  const password = searchParams.get(\"password\");\n  useEffect(() => {\n    const socket = io(SERVER_URL);\n    const term = new Terminal({\n      cursorBlink: true,\n      rows: 30,\n      cols: 100\n    });\n    term.open(terminalRef.current);\n\n    // Connect to SSH when socket connects\n    socket.on(\"connect\", () => {\n      socket.emit(\"ssh-connect\", {\n        host,\n        username,\n        password\n      });\n    });\n\n    // Show server output in terminal\n    socket.on(\"ssh-output\", data => {\n      term.write(data);\n    });\n\n    // Send terminal input to server\n    term.onData(input => {\n      socket.emit(\"ssh-input\", input);\n    });\n    return () => {\n      socket.disconnect();\n      term.dispose();\n    };\n  }, [host, username, password]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: terminalRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      background: \"black\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(SSHTerminal, \"BWue8VYVf3prKjuJgyxOTFHyYJA=\", false, function () {\n  return [useSearchParams];\n});\n_c = SSHTerminal;\nexport default SSHTerminal;\nvar _c;\n$RefreshReg$(_c, \"SSHTerminal\");","map":{"version":3,"names":["React","useEffect","useRef","useSearchParams","Terminal","io","jsxDEV","_jsxDEV","SERVER_URL","SSHTerminal","_s","terminalRef","searchParams","host","get","username","password","socket","term","cursorBlink","rows","cols","open","current","on","emit","data","write","onData","input","disconnect","dispose","ref","style","width","height","background","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Kavindu/Desktop/ssh-project-slt/frontend/src/pages/SSHTerminal.jsx"],"sourcesContent":["// src/pages/SSHTerminal.jsx\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { Terminal } from \"xterm\";\r\nimport \"xterm/css/xterm.css\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst SERVER_URL = \"http://localhost:5000\";\r\n\r\nconst SSHTerminal = () => {\r\n  const terminalRef = useRef();\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const host = searchParams.get(\"host\");\r\n  const username = searchParams.get(\"username\");\r\n  const password = searchParams.get(\"password\");\r\n\r\n  useEffect(() => {\r\n    const socket = io(SERVER_URL);\r\n\r\n    const term = new Terminal({\r\n      cursorBlink: true,\r\n      rows: 30,\r\n      cols: 100,\r\n    });\r\n    term.open(terminalRef.current);\r\n\r\n    // Connect to SSH when socket connects\r\n    socket.on(\"connect\", () => {\r\n      socket.emit(\"ssh-connect\", { host, username, password });\r\n    });\r\n\r\n    // Show server output in terminal\r\n    socket.on(\"ssh-output\", (data) => {\r\n      term.write(data);\r\n    });\r\n\r\n    // Send terminal input to server\r\n    term.onData((input) => {\r\n      socket.emit(\"ssh-input\", input);\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      term.dispose();\r\n    };\r\n  }, [host, username, password]);\r\n\r\n  return <div ref={terminalRef} style={{ width: \"100%\", height: \"100vh\", background: \"black\" }} />;\r\n};\r\n\r\nexport default SSHTerminal;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAO,qBAAqB;AAC5B,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,UAAU,GAAG,uBAAuB;AAE1C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,WAAW,GAAGT,MAAM,CAAC,CAAC;EAC5B,MAAM,CAACU,YAAY,CAAC,GAAGT,eAAe,CAAC,CAAC;EAExC,MAAMU,IAAI,GAAGD,YAAY,CAACE,GAAG,CAAC,MAAM,CAAC;EACrC,MAAMC,QAAQ,GAAGH,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC;EAC7C,MAAME,QAAQ,GAAGJ,YAAY,CAACE,GAAG,CAAC,UAAU,CAAC;EAE7Cb,SAAS,CAAC,MAAM;IACd,MAAMgB,MAAM,GAAGZ,EAAE,CAACG,UAAU,CAAC;IAE7B,MAAMU,IAAI,GAAG,IAAId,QAAQ,CAAC;MACxBe,WAAW,EAAE,IAAI;MACjBC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE;IACR,CAAC,CAAC;IACFH,IAAI,CAACI,IAAI,CAACX,WAAW,CAACY,OAAO,CAAC;;IAE9B;IACAN,MAAM,CAACO,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBP,MAAM,CAACQ,IAAI,CAAC,aAAa,EAAE;QAAEZ,IAAI;QAAEE,QAAQ;QAAEC;MAAS,CAAC,CAAC;IAC1D,CAAC,CAAC;;IAEF;IACAC,MAAM,CAACO,EAAE,CAAC,YAAY,EAAGE,IAAI,IAAK;MAChCR,IAAI,CAACS,KAAK,CAACD,IAAI,CAAC;IAClB,CAAC,CAAC;;IAEF;IACAR,IAAI,CAACU,MAAM,CAAEC,KAAK,IAAK;MACrBZ,MAAM,CAACQ,IAAI,CAAC,WAAW,EAAEI,KAAK,CAAC;IACjC,CAAC,CAAC;IAEF,OAAO,MAAM;MACXZ,MAAM,CAACa,UAAU,CAAC,CAAC;MACnBZ,IAAI,CAACa,OAAO,CAAC,CAAC;IAChB,CAAC;EACH,CAAC,EAAE,CAAClB,IAAI,EAAEE,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAE9B,oBAAOT,OAAA;IAAKyB,GAAG,EAAErB,WAAY;IAACsB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,UAAU,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClG,CAAC;AAAC9B,EAAA,CAxCID,WAAW;EAAA,QAEQN,eAAe;AAAA;AAAAsC,EAAA,GAFlChC,WAAW;AA0CjB,eAAeA,WAAW;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}